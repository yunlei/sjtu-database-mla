
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Aug 07 22:50:16 IRKST 2011
//----------------------------------------------------

package Parse;

import Absyn.*;
import java.util.ArrayList;
import Symbol.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Aug 07 22:50:16 IRKST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\053\004\000\002\052" +
    "\010\000\002\052\013\000\002\054\003\000\002\054\004" +
    "\000\002\005\010\000\002\005\005\000\002\005\012\000" +
    "\002\005\006\000\002\056\004\000\002\014\003\000\002" +
    "\014\005\000\002\015\003\000\002\015\006\000\002\015" +
    "\007\000\002\015\014\000\002\016\010\000\002\016\010" +
    "\000\002\043\002\000\002\043\004\000\002\044\003\000" +
    "\002\044\003\000\002\044\006\000\002\044\003\000\002" +
    "\044\003\000\002\017\002\000\002\017\003\000\002\017" +
    "\004\000\002\045\002\000\002\045\004\000\002\020\002" +
    "\000\002\020\004\000\002\006\012\000\002\022\002\000" +
    "\002\022\003\000\002\024\002\000\002\024\004\000\002" +
    "\026\003\000\002\026\005\000\002\026\007\000\002\046" +
    "\003\000\002\046\005\000\002\025\002\000\002\025\004" +
    "\000\002\027\002\000\002\027\004\000\002\030\003\000" +
    "\002\030\005\000\002\031\002\000\002\031\005\000\002" +
    "\032\002\000\002\032\004\000\002\033\002\000\002\033" +
    "\005\000\002\047\004\000\002\047\005\000\002\051\002" +
    "\000\002\051\003\000\002\051\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\007\011\000\002\007" +
    "\011\000\002\007\012\000\002\007\012\000\002\050\003" +
    "\000\002\050\005\000\002\035\003\000\002\035\005\000" +
    "\002\010\005\000\002\010\007\000\002\036\005\000\002" +
    "\037\003\000\002\037\005\000\002\011\010\000\002\011" +
    "\006\000\002\012\005\000\002\012\005\000\002\012\007" +
    "\000\002\012\005\000\002\013\010\000\002\013\007\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\040\005\000\002\040" +
    "\003\000\002\040\003\000\002\040\005\000\002\040\005" +
    "\000\002\040\005\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\006\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\006\000\002\021\007\000" +
    "\002\021\007\000\002\021\010\000\002\021\010\000\002" +
    "\021\010\000\002\021\005\000\002\021\005\000\002\021" +
    "\007\000\002\021\002\000\002\021\006\000\002\023\003" +
    "\000\002\023\004\000\002\023\006\000\002\023\004\000" +
    "\002\023\006\000\002\006\011\000\002\006\012\000\002" +
    "\006\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\030\010\022\020\017\021\032\023\024\031" +
    "\021\044\007\046\033\064\014\106\030\117\004\120\026" +
    "\001\002\000\004\004\226\001\002\000\004\105\u013d\001" +
    "\002\000\004\105\u013c\001\002\000\040\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\036\uffd2\052\uffd2\053\uffd2\054\uffd2\055" +
    "\uffd2\056\uffd2\062\uffd2\063\uffd2\064\uffd2\072\uffd2\113\u010e" +
    "\001\002\000\004\105\u010d\001\002\000\004\002\000\001" +
    "\002\000\004\105\u010c\001\002\000\004\105\u010b\001\002" +
    "\000\006\044\007\064\014\001\002\000\004\105\u0108\001" +
    "\002\000\004\105\u0107\001\002\000\012\004\317\024\315" +
    "\030\314\045\316\001\002\000\004\002\313\001\002\000" +
    "\004\032\271\001\002\000\004\045\253\001\002\000\004" +
    "\105\252\001\002\000\012\024\241\030\240\045\242\047" +
    "\243\001\002\000\004\105\237\001\002\000\002\001\002" +
    "\000\032\002\uffff\010\022\020\017\021\032\023\024\031" +
    "\021\044\007\046\033\064\014\106\030\117\004\120\026" +
    "\001\002\000\004\004\220\001\002\000\004\105\217\001" +
    "\002\000\004\027\213\001\002\000\004\004\034\001\002" +
    "\000\004\043\035\001\002\000\004\004\037\001\002\000" +
    "\006\051\127\105\uffa4\001\002\000\004\102\043\001\002" +
    "\000\010\051\uffa7\105\uffa7\107\041\001\002\000\004\004" +
    "\037\001\002\000\006\051\uffa6\105\uffa6\001\002\000\034" +
    "\004\064\005\055\006\054\007\062\036\053\052\044\053" +
    "\046\054\063\055\050\056\045\062\052\063\056\064\061" +
    "\001\002\000\004\064\uff9d\001\002\000\004\064\uff99\001" +
    "\002\000\004\064\uff9a\001\002\000\004\064\124\001\002" +
    "\000\004\064\uff9b\001\002\000\066\004\uff97\013\uff97\015" +
    "\uff97\027\uff97\034\uff97\035\uff97\040\uff97\041\uff97\051\uff97" +
    "\065\uff97\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97\076" +
    "\uff97\077\uff97\100\uff97\101\uff97\102\uff97\103\uff97\105\uff97" +
    "\107\uff97\114\uff97\115\uff97\116\uff97\001\002\000\072\004" +
    "\uffb6\013\uffb6\015\uffb6\027\uffb6\034\uffb6\035\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\051\uffb6\065\uffb6\066\uffb6\071\uffb6\072" +
    "\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6" +
    "\101\uffb6\102\uffb6\103\uffb6\105\uffb6\107\uffb6\114\uffb6\115" +
    "\uffb6\116\uffb6\001\002\000\072\004\uffb3\013\uffb3\015\uffb3" +
    "\027\uffb3\034\uffb3\035\uffb3\040\uffb3\041\uffb3\042\uffb3\051" +
    "\uffb3\065\uffb3\066\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3" +
    "\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3\102\uffb3\103" +
    "\uffb3\105\uffb3\107\uffb3\114\uffb3\115\uffb3\116\uffb3\001\002" +
    "\000\072\004\uffb8\013\uffb8\015\uffb8\027\uffb8\034\uffb8\035" +
    "\uffb8\040\uffb8\041\uffb8\042\uffb8\051\uffb8\065\uffb8\066\uffb8" +
    "\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077" +
    "\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\105\uffb8\107\uffb8" +
    "\114\uffb8\115\uffb8\116\uffb8\001\002\000\072\004\uffb7\013" +
    "\uffb7\015\uffb7\027\uffb7\034\uffb7\035\uffb7\040\uffb7\041\uffb7" +
    "\042\uffb7\051\uffb7\065\uffb7\066\uffb7\071\uffb7\072\uffb7\073" +
    "\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7" +
    "\102\uffb7\103\uffb7\105\uffb7\107\uffb7\114\uffb7\115\uffb7\116" +
    "\uffb7\001\002\000\072\004\uffb5\013\uffb5\015\uffb5\027\uffb5" +
    "\034\uffb5\035\uffb5\040\uffb5\041\uffb5\042\uffb5\051\uffb5\065" +
    "\uffb5\066\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5" +
    "\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5\105" +
    "\uffb5\107\uffb5\114\uffb5\115\uffb5\116\uffb5\001\002\000\066" +
    "\004\uff96\013\uff96\015\uff96\027\uff96\034\uff96\035\uff96\040" +
    "\uff96\041\uff96\051\uff96\065\uff96\071\uff96\072\uff96\073\uff96" +
    "\074\uff96\075\uff96\076\uff96\077\uff96\100\uff96\101\uff96\102" +
    "\uff96\103\uff96\105\uff96\107\uff96\114\uff96\115\uff96\116\uff96" +
    "\001\002\000\022\051\uffa8\071\074\072\077\073\075\074" +
    "\076\075\072\105\uffa8\107\uffa8\001\002\000\036\004\064" +
    "\005\055\006\054\007\062\036\053\044\007\052\044\053" +
    "\046\054\063\055\050\056\045\062\052\063\056\064\067" +
    "\001\002\000\072\004\uffb4\013\uffb4\015\uffb4\027\uffb4\034" +
    "\uffb4\035\uffb4\040\uffb4\041\uffb4\042\uffb4\051\uffb4\065\uffb4" +
    "\066\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076" +
    "\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\105\uffb4" +
    "\107\uffb4\114\uffb4\115\uffb4\116\uffb4\001\002\000\004\064" +
    "\uff9c\001\002\000\074\004\uffc5\013\uffc5\015\uffc5\016\uffc5" +
    "\022\uffc5\027\uffc5\034\uffc5\035\uffc5\040\uffc5\041\uffc5\051" +
    "\uffc5\065\uffc5\070\065\071\uffc5\072\uffc5\073\uffc5\074\uffc5" +
    "\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103" +
    "\uffc5\105\uffc5\107\uffc5\114\uffc5\115\uffc5\116\uffc5\001\002" +
    "\000\004\004\066\001\002\000\072\004\uffc4\013\uffc4\015" +
    "\uffc4\016\uffc4\022\uffc4\027\uffc4\034\uffc4\035\uffc4\040\uffc4" +
    "\041\uffc4\051\uffc4\065\uffc4\071\uffc4\072\uffc4\073\uffc4\074" +
    "\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4" +
    "\103\uffc4\105\uffc4\107\uffc4\114\uffc4\115\uffc4\116\uffc4\001" +
    "\002\000\036\004\064\005\055\006\054\007\062\036\053" +
    "\044\007\052\044\053\046\054\063\055\050\056\045\062" +
    "\052\063\056\064\067\001\002\000\004\065\105\001\002" +
    "\000\016\065\073\071\074\072\077\073\075\074\076\075" +
    "\072\001\002\000\034\004\064\005\055\006\054\007\062" +
    "\036\053\052\044\053\046\054\063\055\050\056\045\062" +
    "\052\063\056\064\061\001\002\000\066\004\uff98\013\uff98" +
    "\015\uff98\027\uff98\034\uff98\035\uff98\040\uff98\041\uff98\051" +
    "\uff98\065\uff98\071\uff98\072\uff98\073\uff98\074\uff98\075\uff98" +
    "\076\uff98\077\uff98\100\uff98\101\uff98\102\uff98\103\uff98\105" +
    "\uff98\107\uff98\114\uff98\115\uff98\116\uff98\001\002\000\034" +
    "\004\064\005\055\006\054\007\062\036\053\052\044\053" +
    "\046\054\063\055\050\056\045\062\052\063\056\064\061" +
    "\001\002\000\034\004\064\005\055\006\054\007\062\036" +
    "\053\052\044\053\046\054\063\055\050\056\045\062\052" +
    "\063\056\064\061\001\002\000\034\004\064\005\055\006" +
    "\054\007\062\036\053\052\044\053\046\054\063\055\050" +
    "\056\045\062\052\063\056\064\061\001\002\000\034\004" +
    "\064\005\055\006\054\007\062\036\053\052\044\053\046" +
    "\054\063\055\050\056\045\062\052\063\056\064\061\001" +
    "\002\000\066\004\uff93\013\uff93\015\uff93\027\uff93\034\uff93" +
    "\035\uff93\040\uff93\041\uff93\051\uff93\065\uff93\071\uff93\072" +
    "\uff93\073\uff93\074\uff93\075\uff93\076\uff93\077\uff93\100\uff93" +
    "\101\uff93\102\uff93\103\uff93\105\uff93\107\uff93\114\uff93\115" +
    "\uff93\116\uff93\001\002\000\066\004\uff92\013\uff92\015\uff92" +
    "\027\uff92\034\uff92\035\uff92\040\uff92\041\uff92\051\uff92\065" +
    "\uff92\071\uff92\072\uff92\073\uff92\074\uff92\075\uff92\076\uff92" +
    "\077\uff92\100\uff92\101\uff92\102\uff92\103\uff92\105\uff92\107" +
    "\uff92\114\uff92\115\uff92\116\uff92\001\002\000\066\004\uff94" +
    "\013\uff94\015\uff94\027\uff94\034\uff94\035\uff94\040\uff94\041" +
    "\uff94\051\uff94\065\uff94\071\uff94\072\077\073\uff94\074\076" +
    "\075\072\076\uff94\077\uff94\100\uff94\101\uff94\102\uff94\103" +
    "\uff94\105\uff94\107\uff94\114\uff94\115\uff94\116\uff94\001\002" +
    "\000\066\004\uff95\013\uff95\015\uff95\027\uff95\034\uff95\035" +
    "\uff95\040\uff95\041\uff95\051\uff95\065\uff95\071\uff95\072\077" +
    "\073\uff95\074\076\075\072\076\uff95\077\uff95\100\uff95\101" +
    "\uff95\102\uff95\103\uff95\105\uff95\107\uff95\114\uff95\115\uff95" +
    "\116\uff95\001\002\000\066\004\uff91\013\uff91\015\uff91\027" +
    "\uff91\034\uff91\035\uff91\040\uff91\041\uff91\051\uff91\065\uff91" +
    "\071\uff91\072\uff91\073\uff91\074\uff91\075\uff91\076\uff91\077" +
    "\uff91\100\uff91\101\uff91\102\uff91\103\uff91\105\uff91\107\uff91" +
    "\114\uff91\115\uff91\116\uff91\001\002\000\066\004\uff90\013" +
    "\uff90\015\uff90\027\uff90\034\uff90\035\uff90\040\uff90\041\uff90" +
    "\051\uff90\065\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075" +
    "\uff90\076\uff90\077\uff90\100\uff90\101\uff90\102\uff90\103\uff90" +
    "\105\uff90\107\uff90\114\uff90\115\uff90\116\uff90\001\002\000" +
    "\004\065\107\001\002\000\042\034\uff90\035\uff90\065\uff90" +
    "\071\uff90\072\uff90\073\uff90\074\uff90\075\uff90\076\uff90\077" +
    "\uff90\100\uff90\101\uff90\102\uff90\103\uff90\104\110\116\uff90" +
    "\001\002\000\006\012\111\064\112\001\002\000\004\064" +
    "\121\001\002\000\006\044\007\064\014\001\002\000\004" +
    "\065\114\001\002\000\010\065\uff75\104\115\105\uff75\001" +
    "\002\000\004\064\116\001\002\000\006\044\007\064\014" +
    "\001\002\000\004\065\120\001\002\000\006\065\uff73\105" +
    "\uff73\001\002\000\006\044\007\064\014\001\002\000\004" +
    "\065\123\001\002\000\006\065\uff74\105\uff74\001\002\000" +
    "\004\004\064\001\002\000\004\065\126\001\002\000\066" +
    "\004\uff8f\013\uff8f\015\uff8f\027\uff8f\034\uff8f\035\uff8f\040" +
    "\uff8f\041\uff8f\051\uff8f\065\uff8f\071\uff8f\072\uff8f\073\uff8f" +
    "\074\uff8f\075\uff8f\076\uff8f\077\uff8f\100\uff8f\101\uff8f\102" +
    "\uff8f\103\uff8f\105\uff8f\107\uff8f\114\uff8f\115\uff8f\116\uff8f" +
    "\001\002\000\046\004\064\005\055\006\054\007\062\013" +
    "\uff7c\026\134\035\130\036\053\040\uff7c\052\044\053\046" +
    "\054\063\055\050\056\045\062\052\063\056\064\131\105" +
    "\uff7c\001\002\000\004\026\207\001\002\000\050\004\064" +
    "\005\055\006\054\007\062\013\uff7c\026\134\035\130\036" +
    "\053\040\uff7c\044\007\052\044\053\046\054\063\055\050" +
    "\056\045\062\052\063\056\064\203\065\uff7c\001\002\000" +
    "\010\013\177\040\200\105\uffa5\001\002\000\036\034\151" +
    "\035\147\071\074\072\077\073\075\074\076\075\072\076" +
    "\150\077\146\100\145\101\142\102\144\103\143\116\141" +
    "\001\002\000\004\064\135\001\002\000\006\044\007\064" +
    "\014\001\002\000\004\065\137\001\002\000\020\013\uff85" +
    "\040\uff85\041\uff85\065\uff85\105\uff85\114\uff85\115\uff85\001" +
    "\002\000\040\004\064\005\055\006\054\007\062\012\166" +
    "\014\167\036\053\052\044\053\046\054\063\055\050\056" +
    "\045\062\052\063\056\064\061\001\002\000\004\064\163" +
    "\001\002\000\040\004\uff8a\005\uff8a\006\uff8a\007\uff8a\012" +
    "\uff8a\014\uff8a\036\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a" +
    "\056\uff8a\062\uff8a\063\uff8a\064\uff8a\001\002\000\040\004" +
    "\uff89\005\uff89\006\uff89\007\uff89\012\uff89\014\uff89\036\uff89" +
    "\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89\062\uff89\063" +
    "\uff89\064\uff89\001\002\000\040\004\uff8c\005\uff8c\006\uff8c" +
    "\007\uff8c\012\uff8c\014\uff8c\036\uff8c\052\uff8c\053\uff8c\054" +
    "\uff8c\055\uff8c\056\uff8c\062\uff8c\063\uff8c\064\uff8c\001\002" +
    "\000\040\004\uff8b\005\uff8b\006\uff8b\007\uff8b\012\uff8b\014" +
    "\uff8b\036\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b" +
    "\062\uff8b\063\uff8b\064\uff8b\001\002\000\040\004\uff8d\005" +
    "\uff8d\006\uff8d\007\uff8d\012\uff8d\014\uff8d\036\uff8d\052\uff8d" +
    "\053\uff8d\054\uff8d\055\uff8d\056\uff8d\062\uff8d\063\uff8d\064" +
    "\uff8d\001\002\000\006\034\155\116\156\001\002\000\040" +
    "\004\uff8e\005\uff8e\006\uff8e\007\uff8e\012\uff8e\014\uff8e\036" +
    "\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\062\uff8e" +
    "\063\uff8e\064\uff8e\001\002\000\004\005\152\001\002\000" +
    "\022\013\uff7e\025\153\040\uff7e\041\uff7e\065\uff7e\105\uff7e" +
    "\114\uff7e\115\uff7e\001\002\000\004\005\154\001\002\000" +
    "\020\013\uff7d\040\uff7d\041\uff7d\065\uff7d\105\uff7d\114\uff7d" +
    "\115\uff7d\001\002\000\004\005\162\001\002\000\004\064" +
    "\157\001\002\000\006\044\007\064\014\001\002\000\004" +
    "\065\161\001\002\000\020\013\uff82\040\uff82\041\uff82\065" +
    "\uff82\105\uff82\114\uff82\115\uff82\001\002\000\020\013\uff7b" +
    "\040\uff7b\041\uff7b\065\uff7b\105\uff7b\114\uff7b\115\uff7b\001" +
    "\002\000\006\044\007\064\014\001\002\000\004\065\165" +
    "\001\002\000\020\013\uff83\040\uff83\041\uff83\065\uff83\105" +
    "\uff83\114\uff83\115\uff83\001\002\000\004\064\174\001\002" +
    "\000\004\064\171\001\002\000\032\013\uff88\040\uff88\041" +
    "\uff88\065\uff88\071\074\072\077\073\075\074\076\075\072" +
    "\105\uff88\114\uff88\115\uff88\001\002\000\006\044\007\064" +
    "\014\001\002\000\004\065\173\001\002\000\020\013\uff81" +
    "\040\uff81\041\uff81\065\uff81\105\uff81\114\uff81\115\uff81\001" +
    "\002\000\006\044\007\064\014\001\002\000\004\065\176" +
    "\001\002\000\020\013\uff80\040\uff80\041\uff80\065\uff80\105" +
    "\uff80\114\uff80\115\uff80\001\002\000\056\004\064\005\055" +
    "\006\054\007\062\013\uff7c\026\134\035\130\036\053\040" +
    "\uff7c\041\uff7c\052\044\053\046\054\063\055\050\056\045" +
    "\062\052\063\056\064\131\065\uff7c\105\uff7c\114\uff7c\115" +
    "\uff7c\001\002\000\056\004\064\005\055\006\054\007\062" +
    "\013\uff7c\026\134\035\130\036\053\040\uff7c\041\uff7c\052" +
    "\044\053\046\054\063\055\050\056\045\062\052\063\056" +
    "\064\131\065\uff7c\105\uff7c\114\uff7c\115\uff7c\001\002\000" +
    "\020\013\177\040\uff86\041\uff86\065\uff86\105\uff86\114\uff86" +
    "\115\uff86\001\002\000\020\013\uff87\040\uff87\041\uff87\065" +
    "\uff87\105\uff87\114\uff87\115\uff87\001\002\000\050\004\064" +
    "\005\055\006\054\007\062\013\uff7c\026\134\035\130\036" +
    "\053\040\uff7c\044\007\052\044\053\046\054\063\055\050" +
    "\056\045\062\052\063\056\064\203\065\uff7c\001\002\000" +
    "\010\013\177\040\200\065\206\001\002\000\040\034\151" +
    "\035\147\065\073\071\074\072\077\073\075\074\076\075" +
    "\072\076\150\077\146\100\145\101\142\102\144\103\143" +
    "\116\141\001\002\000\020\013\uff7f\040\uff7f\041\uff7f\065" +
    "\uff7f\105\uff7f\114\uff7f\115\uff7f\001\002\000\004\064\210" +
    "\001\002\000\006\044\007\064\014\001\002\000\004\065" +
    "\212\001\002\000\020\013\uff84\040\uff84\041\uff84\065\uff84" +
    "\105\uff84\114\uff84\115\uff84\001\002\000\004\004\214\001" +
    "\002\000\006\051\215\105\uffaa\001\002\000\046\004\064" +
    "\005\055\006\054\007\062\013\uff7c\026\134\035\130\036" +
    "\053\040\uff7c\052\044\053\046\054\063\055\050\056\045" +
    "\062\052\063\056\064\131\105\uff7c\001\002\000\010\013" +
    "\177\040\200\105\uffa9\001\002\000\032\002\ufffa\010\ufffa" +
    "\020\ufffa\021\ufffa\023\ufffa\031\ufffa\044\ufffa\046\ufffa\064" +
    "\ufffa\106\ufffa\117\ufffa\120\ufffa\001\002\000\004\105\uffea" +
    "\001\002\000\004\002\ufffe\001\002\000\004\037\ufff0\001" +
    "\002\000\004\037\224\001\002\000\004\004\226\001\002" +
    "\000\004\121\231\001\002\000\016\050\uffac\065\uffac\105" +
    "\uffac\107\227\121\uffac\122\uffac\001\002\000\004\004\226" +
    "\001\002\000\014\050\uffab\065\uffab\105\uffab\121\uffab\122" +
    "\uffab\001\002\000\004\004\226\001\002\000\006\105\ufff2" +
    "\122\233\001\002\000\004\120\234\001\002\000\004\123" +
    "\235\001\002\000\004\105\ufff1\001\002\000\004\037\uffef" +
    "\001\002\000\032\002\ufff4\010\ufff4\020\ufff4\021\ufff4\023" +
    "\ufff4\031\ufff4\044\ufff4\046\ufff4\064\ufff4\106\ufff4\117\ufff4" +
    "\120\ufff4\001\002\000\004\004\247\001\002\000\004\004" +
    "\246\001\002\000\004\004\226\001\002\000\004\004\244" +
    "\001\002\000\004\105\uffa2\001\002\000\004\105\uffa3\001" +
    "\002\000\004\105\uffa0\001\002\000\004\037\250\001\002" +
    "\000\004\004\251\001\002\000\004\105\uffa1\001\002\000" +
    "\032\002\ufffc\010\ufffc\020\ufffc\021\ufffc\023\ufffc\031\ufffc" +
    "\044\ufffc\046\ufffc\064\ufffc\106\ufffc\117\ufffc\120\ufffc\001" +
    "\002\000\004\004\254\001\002\000\006\011\255\023\256" +
    "\001\002\000\004\004\260\001\002\000\004\004\257\001" +
    "\002\000\004\105\uff9e\001\002\000\012\057\265\060\263" +
    "\061\264\111\262\001\002\000\004\105\uff9f\001\002\000" +
    "\026\035\uffdc\036\uffdc\042\uffdc\064\266\065\uffdc\066\uffdc" +
    "\067\uffdc\105\uffdc\107\uffdc\110\uffdc\001\002\000\024\035" +
    "\uffde\036\uffde\042\uffde\065\uffde\066\uffde\067\uffde\105\uffde" +
    "\107\uffde\110\uffde\001\002\000\024\035\uffdb\036\uffdb\042" +
    "\uffdb\065\uffdb\066\uffdb\067\uffdb\105\uffdb\107\uffdb\110\uffdb" +
    "\001\002\000\024\035\uffdf\036\uffdf\042\uffdf\065\uffdf\066" +
    "\uffdf\067\uffdf\105\uffdf\107\uffdf\110\uffdf\001\002\000\004" +
    "\006\267\001\002\000\004\065\270\001\002\000\024\035" +
    "\uffdd\036\uffdd\042\uffdd\065\uffdd\066\uffdd\067\uffdd\105\uffdd" +
    "\107\uffdd\110\uffdd\001\002\000\004\004\272\001\002\000" +
    "\006\004\226\050\273\001\002\000\004\064\306\001\002" +
    "\000\004\050\275\001\002\000\004\064\276\001\002\000" +
    "\022\005\055\006\054\007\062\036\053\044\007\062\052" +
    "\063\056\064\014\001\002\000\004\065\305\001\002\000" +
    "\006\065\uffae\107\303\001\002\000\004\065\302\001\002" +
    "\000\004\105\uffb0\001\002\000\016\005\055\006\054\007" +
    "\062\036\053\062\052\063\056\001\002\000\004\065\uffad" +
    "\001\002\000\004\105\uffaf\001\002\000\022\005\055\006" +
    "\054\007\062\036\053\044\007\062\052\063\056\064\014" +
    "\001\002\000\004\065\312\001\002\000\004\065\311\001" +
    "\002\000\004\105\uffb1\001\002\000\004\105\uffb2\001\002" +
    "\000\004\002\001\001\002\000\004\004\u0101\001\002\000" +
    "\004\004\u0100\001\002\000\004\004\322\001\002\000\004" +
    "\015\320\001\002\000\006\044\007\064\014\001\002\000" +
    "\004\105\uffeb\001\002\000\004\064\323\001\002\000\012" +
    "\004\332\042\331\067\326\124\325\001\002\000\006\065" +
    "\uffe9\107\376\001\002\000\004\033\365\001\002\000\004" +
    "\064\362\001\002\000\004\065\361\001\002\000\006\065" +
    "\uffe7\107\uffe7\001\002\000\004\033\355\001\002\000\012" +
    "\057\265\060\263\061\264\111\262\001\002\000\022\035" +
    "\335\036\336\042\uffda\065\uffda\066\uffda\067\334\107\uffda" +
    "\110\uffda\001\002\000\004\064\352\001\002\000\004\036" +
    "\351\001\002\000\014\042\uffd9\065\uffd9\066\uffd9\107\uffd9" +
    "\110\uffd9\001\002\000\014\042\uffe1\065\uffe1\066\uffe1\107" +
    "\uffe1\110\340\001\002\000\016\005\055\006\054\007\062" +
    "\036\053\062\052\063\056\001\002\000\012\042\uffd7\065" +
    "\uffd7\066\342\107\uffd7\001\002\000\004\112\347\001\002" +
    "\000\010\042\344\065\uffd5\107\uffd5\001\002\000\004\033" +
    "\346\001\002\000\006\065\uffe3\107\uffe3\001\002\000\006" +
    "\065\uffd4\107\uffd4\001\002\000\010\042\uffd6\065\uffd6\107" +
    "\uffd6\001\002\000\012\042\uffe0\065\uffe0\066\uffe0\107\uffe0" +
    "\001\002\000\014\042\uffd8\065\uffd8\066\uffd8\107\uffd8\110" +
    "\uffd8\001\002\000\046\004\064\005\055\006\054\007\062" +
    "\013\uff7c\026\134\035\130\036\053\040\uff7c\052\044\053" +
    "\046\054\063\055\050\056\045\062\052\063\056\064\131" +
    "\065\uff7c\001\002\000\010\013\177\040\200\065\354\001" +
    "\002\000\006\065\uffe2\107\uffe2\001\002\000\004\064\356" +
    "\001\002\000\004\004\226\001\002\000\004\065\360\001" +
    "\002\000\006\065\uffe5\107\uffe5\001\002\000\004\105\uffee" +
    "\001\002\000\046\004\064\005\055\006\054\007\062\013" +
    "\uff7c\026\134\035\130\036\053\040\uff7c\052\044\053\046" +
    "\054\063\055\050\056\045\062\052\063\056\064\131\065" +
    "\uff7c\001\002\000\010\013\177\040\200\065\364\001\002" +
    "\000\006\065\uffe6\107\uffe6\001\002\000\004\064\366\001" +
    "\002\000\004\004\367\001\002\000\004\065\370\001\002" +
    "\000\004\125\371\001\002\000\004\004\372\001\002\000" +
    "\004\064\373\001\002\000\004\004\374\001\002\000\004" +
    "\065\375\001\002\000\006\065\uffe4\107\uffe4\001\002\000" +
    "\012\004\332\042\331\067\326\124\325\001\002\000\004" +
    "\065\uffe8\001\002\000\004\105\uffed\001\002\000\004\037" +
    "\u0102\001\002\000\004\004\u0103\001\002\000\004\064\u0104" +
    "\001\002\000\004\004\u0105\001\002\000\004\065\u0106\001" +
    "\002\000\004\105\uffec\001\002\000\032\002\ufffd\010\ufffd" +
    "\020\ufffd\021\ufffd\023\ufffd\031\ufffd\044\ufffd\046\ufffd\064" +
    "\ufffd\106\ufffd\117\ufffd\120\ufffd\001\002\000\032\002\ufff6" +
    "\010\ufff6\020\ufff6\021\ufff6\023\ufff6\031\ufff6\044\ufff6\046" +
    "\ufff6\064\ufff6\106\ufff6\117\ufff6\120\ufff6\001\002\000\004" +
    "\065\u010a\001\002\000\004\104\110\001\002\000\032\002" +
    "\ufff9\010\ufff9\020\ufff9\021\ufff9\023\ufff9\031\ufff9\044\ufff9" +
    "\046\ufff9\064\ufff9\106\ufff9\117\ufff9\120\ufff9\001\002\000" +
    "\032\002\ufff8\010\ufff8\020\ufff8\021\ufff8\023\ufff8\031\ufff8" +
    "\044\ufff8\046\ufff8\064\ufff8\106\ufff8\117\ufff8\120\ufff8\001" +
    "\002\000\032\002\ufff5\010\ufff5\020\ufff5\021\ufff5\023\ufff5" +
    "\031\ufff5\044\ufff5\046\ufff5\064\ufff5\106\ufff5\117\ufff5\120" +
    "\ufff5\001\002\000\036\004\uffd1\005\uffd1\006\uffd1\007\uffd1" +
    "\036\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\062" +
    "\uffd1\063\uffd1\064\uffd1\072\uffd1\001\002\000\036\004\064" +
    "\005\055\006\054\007\062\036\053\052\044\053\046\054" +
    "\063\055\050\056\045\062\052\063\056\064\061\072\u0110" +
    "\001\002\000\020\027\uff7a\041\uff7a\051\uff7a\065\uff7a\105" +
    "\uff7a\114\uff7a\115\uff7a\001\002\000\040\004\u0136\015\u0134" +
    "\027\uffd0\041\uffd0\051\uffd0\065\uffd0\071\074\072\077\073" +
    "\075\074\076\075\072\105\uffd0\107\uffd0\114\uffd0\115\uffd0" +
    "\001\002\000\020\027\u0113\041\uffc9\051\uffc9\065\uffc9\105" +
    "\uffc9\114\uffc9\115\uffc9\001\002\000\006\004\u012a\064\u0128" +
    "\001\002\000\016\041\uffc7\051\u0116\065\uffc7\105\uffc7\114" +
    "\uffc7\115\uffc7\001\002\000\014\041\uffc3\065\uffc3\105\uffc3" +
    "\114\u0119\115\uffc3\001\002\000\056\004\064\005\055\006" +
    "\054\007\062\013\uff7c\026\134\035\130\036\053\040\uff7c" +
    "\041\uff7c\052\044\053\046\054\063\055\050\056\045\062" +
    "\052\063\056\064\131\065\uff7c\105\uff7c\114\uff7c\115\uff7c" +
    "\001\002\000\020\013\177\040\200\041\uffc6\065\uffc6\105" +
    "\uffc6\114\uffc6\115\uffc6\001\002\000\012\041\uffc1\065\uffc1" +
    "\105\uffc1\115\u011d\001\002\000\004\017\u011a\001\002\000" +
    "\004\004\064\001\002\000\012\041\uffc2\065\uffc2\105\uffc2" +
    "\115\uffc2\001\002\000\010\041\u011f\065\uffbf\105\uffbf\001" +
    "\002\000\052\004\064\005\055\006\054\007\062\013\uff7c" +
    "\026\134\035\130\036\053\040\uff7c\041\uff7c\052\044\053" +
    "\046\054\063\055\050\056\045\062\052\063\056\064\131" +
    "\065\uff7c\105\uff7c\001\002\000\014\013\177\040\200\041" +
    "\uffc0\065\uffc0\105\uffc0\001\002\000\004\017\u0121\001\002" +
    "\000\006\065\uffd3\105\uffd3\001\002\000\004\004\064\001" +
    "\002\000\006\065\uffbe\105\uffbe\001\002\000\014\004\uffbb" +
    "\016\u0125\022\u0124\065\uffbb\105\uffbb\001\002\000\010\004" +
    "\uffb9\065\uffb9\105\uffb9\001\002\000\010\004\uffba\065\uffba" +
    "\105\uffba\001\002\000\010\004\064\065\uffbd\105\uffbd\001" +
    "\002\000\006\065\uffbc\105\uffbc\001\002\000\006\044\007" +
    "\064\014\001\002\000\016\041\uffc8\051\uffc8\065\uffc8\105" +
    "\uffc8\114\uffc8\115\uffc8\001\002\000\022\015\u012e\041\uffce" +
    "\051\uffce\065\uffce\105\uffce\107\uffce\114\uffce\115\uffce\001" +
    "\002\000\020\041\uffcb\051\uffcb\065\uffcb\105\uffcb\107\u012c" +
    "\114\uffcb\115\uffcb\001\002\000\006\004\u012a\064\u0128\001" +
    "\002\000\016\041\uffca\051\uffca\065\uffca\105\uffca\114\uffca" +
    "\115\uffca\001\002\000\004\004\u012f\001\002\000\020\041" +
    "\uffcd\051\uffcd\065\uffcd\105\uffcd\107\uffcd\114\uffcd\115\uffcd" +
    "\001\002\000\004\065\u0131\001\002\000\004\015\u0132\001" +
    "\002\000\004\004\u0133\001\002\000\020\041\uffcc\051\uffcc" +
    "\065\uffcc\105\uffcc\107\uffcc\114\uffcc\115\uffcc\001\002\000" +
    "\004\004\u013b\001\002\000\022\027\uff77\041\uff77\051\uff77" +
    "\065\uff77\105\uff77\107\u0139\114\uff77\115\uff77\001\002\000" +
    "\022\027\uff79\041\uff79\051\uff79\065\uff79\105\uff79\107\u0137" +
    "\114\uff79\115\uff79\001\002\000\036\004\064\005\055\006" +
    "\054\007\062\036\053\052\044\053\046\054\063\055\050" +
    "\056\045\062\052\063\056\064\061\072\u0110\001\002\000" +
    "\020\027\uff78\041\uff78\051\uff78\065\uff78\105\uff78\114\uff78" +
    "\115\uff78\001\002\000\036\004\064\005\055\006\054\007" +
    "\062\036\053\052\044\053\046\054\063\055\050\056\045" +
    "\062\052\063\056\064\061\072\u0110\001\002\000\020\027" +
    "\uff76\041\uff76\051\uff76\065\uff76\105\uff76\114\uff76\115\uff76" +
    "\001\002\000\022\027\uffcf\041\uffcf\051\uffcf\065\uffcf\105" +
    "\uffcf\107\uffcf\114\uffcf\115\uffcf\001\002\000\032\002\ufff7" +
    "\010\ufff7\020\ufff7\021\ufff7\023\ufff7\031\ufff7\044\ufff7\046" +
    "\ufff7\064\ufff7\106\ufff7\117\ufff7\120\ufff7\001\002\000\032" +
    "\002\ufffb\010\ufffb\020\ufffb\021\ufffb\023\ufffb\031\ufffb\044" +
    "\ufffb\046\ufffb\064\ufffb\106\ufffb\117\ufffb\120\ufffb\001\002" +
    "\000\004\105\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\034\002\017\003\010\004\026\005\015\006" +
    "\022\007\004\010\030\011\012\012\011\013\005\052\007" +
    "\053\014\056\024\001\001\000\004\035\u013d\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u010e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u0108\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\054\222\055\221\001" +
    "\001\000\032\003\220\004\026\005\015\006\022\007\004" +
    "\010\030\011\012\012\011\013\005\052\007\053\014\056" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\037\037\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\037\037\041\001\001\000" +
    "\002\001\001\000\012\030\050\034\056\040\057\041\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\067\030\050\034\056\040\070\041" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\105\030\050\034\056\040\070\041\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\030\050\034\056\040" +
    "\103\041\046\001\001\000\002\001\001\000\012\030\050" +
    "\034\056\040\102\041\046\001\001\000\012\030\050\034" +
    "\056\040\101\041\046\001\001\000\012\030\050\034\056" +
    "\040\100\041\046\001\001\000\012\030\050\034\056\040" +
    "\077\041\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\021\131\030\050\034\056\040\132\041\046" +
    "\001\001\000\002\001\001\000\016\006\067\021\203\030" +
    "\050\034\056\040\204\041\046\001\001\000\002\001\001" +
    "\000\004\042\137\001\001\000\002\001\001\000\004\006" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\030\050\034\056\040\167\041\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\021\201\030" +
    "\050\034\056\040\132\041\046\001\001\000\014\021\200" +
    "\030\050\034\056\040\132\041\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\105\021\203\030\050" +
    "\034\056\040\204\041\046\001\001\000\002\001\001\000" +
    "\004\042\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\021\215" +
    "\030\050\034\056\040\132\041\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\054\235\055\221\001\001\000\002\001\001\000" +
    "\004\035\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\227\001\001\000\002\001\001\000\004\035" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\300\034\277\050\276\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\034" +
    "\277\050\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\307\034\277\050\306\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\320\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\326\015" +
    "\323\016\327\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\332\001\001\000\004\017\336" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\340\001\001\000\004\034\347\001\001" +
    "\000\004\045\342\001\001\000\002\001\001\000\004\020" +
    "\344\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\021\352\030\050\034\056\040\132\041\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\356\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\021\362\030\050\034" +
    "\056\040\132\041\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\376\015\323\016\327\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\023\u0111\030" +
    "\050\034\056\040\u0110\041\046\001\001\000\002\001\001" +
    "\000\004\024\u0134\001\001\000\004\025\u0113\001\001\000" +
    "\006\026\u012a\046\u0128\001\001\000\004\027\u0114\001\001" +
    "\000\004\031\u0117\001\001\000\014\021\u0116\030\050\034" +
    "\056\040\132\041\046\001\001\000\002\001\001\000\004" +
    "\032\u011b\001\001\000\002\001\001\000\004\030\u011a\001" +
    "\001\000\002\001\001\000\004\033\u011f\001\001\000\014" +
    "\021\u011d\030\050\034\056\040\132\041\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\u0122\047\u0121\001\001\000\002\001\001\000\004\051" +
    "\u0125\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\u0122\047\u0126\001\001\000\002\001\001\000\004\006" +
    "\u012f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\u012a\046\u012c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\023\u0137\030\050\034\056\040\u0110\041\046\001\001\000" +
    "\002\001\001\000\014\023\u0139\030\050\034\056\040\u0110" +
    "\041\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  public Exp parseResult;
  Lexer lexer;
  
  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ArrayList<ErrorMsg.ErrorMsg> errorMsgList=new ArrayList<ErrorMsg.ErrorMsg>();
	ErrorMsg.ErrorMsg errorMsg=new ErrorMsg.ErrorMsg();
  public void report_error(String message, 
			   java_cup.runtime.Symbol info) {
      errorMsgList.add(new ErrorMsg.ErrorMsg(info.left, message));
  }

  public parser(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 static  Symbol sym(String s) {
	         return  Symbol.symbol(s);
	        }
	    
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // select ::= LPAREN select RPAREN UNION LPAREN select RPAREN UNION LPAREN select RPAREN 
            {
              SelectExp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // select ::= LPAREN select RPAREN UNION ALL LPAREN select RPAREN 
            {
              SelectExp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // select ::= LPAREN select RPAREN UNION LPAREN select RPAREN 
            {
              SelectExp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // select_expr ::= value as_or_not COMMA select_expr 
            {
              SelectExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AsOrNot as = (AsOrNot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectExpr s = (SelectExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(v,as,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // select_expr ::= value as_or_not 
            {
              SelectExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AsOrNot as = (AsOrNot)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(v,as,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // select_expr ::= value NAME COMMA select_expr 
            {
              SelectExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectExpr s = (SelectExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(v,new AsOrNot(new Symbol(N)),s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // select_expr ::= value NAME 
            {
              SelectExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(v,new AsOrNot(new Symbol(N)),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // select_expr ::= TIMES 
            {
              SelectExpr RESULT =null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object T = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(new ColValue(new ColName(null, new Symbol("*"))),null,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // bool_expr ::= value NOT LIKE STRING 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new LikeEscapeExp(v,false,false,S,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // bool_expr ::= 
            {
              BoolExp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // bool_expr ::= value LIKE STRING ESCAPE STRING 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String S = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new LikeEscapeExp(v,true,true,S,S2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // bool_expr ::= value LIKE STRING 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new LikeEscapeExp(v,true,false,S,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // bool_expr ::= LPAREN bool_expr RPAREN 
            {
              BoolExp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // bool_expr ::= value cop ALL LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new AllExp(v,c,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // bool_expr ::= value cop ANY LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new AnyExp(v,c,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // bool_expr ::= value NOT IN LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new InExp(false,v,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // bool_expr ::= value IN LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new InExp(true,v,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // bool_expr ::= NOT EXISTS LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new BoolExsitExp(false,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // bool_expr ::= EXISTS LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new BoolExsitExp(true,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // bool_expr ::= bool_expr OR bool_expr 
            {
              BoolExp RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BoolExp b1 = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp b2 = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new BoolOrExp(b1,b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // bool_expr ::= bool_expr AND bool_expr 
            {
              BoolExp RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BoolExp b1 = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp b2 = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new BoolAndExp(b1,b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // bool_expr ::= value cop value 
            {
              BoolExp RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CompBoolExp(v1,c,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // cop ::= NEQ 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("NEQ"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // cop ::= GE 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("GE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // cop ::= LE 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("LE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // cop ::= EQ 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("EQ"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // cop ::= GT 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("GT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // cop ::= LT 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("LT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // value ::= func LPAREN col_name RPAREN 
            {
              Value RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new FuncValue(f,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // value ::= LPAREN select RPAREN 
            {
              Value RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new SubqueryValue(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // value ::= value MOD value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("MOD"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // value ::= value DIVIDE value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("DIVIDE"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // value ::= value TIMES value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("TIMES"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // value ::= value MINUS value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("MINUS"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // value ::= value PLUS value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("PLUS"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // value ::= const_value 
            {
              Value RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValue v = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // value ::= col_name 
            {
              Value RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ColValue(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // value ::= LPAREN value RPAREN 
            {
              Value RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // func ::= SUM 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("SUM");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // func ::= COUNT 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("COUNT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // func ::= MAX 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("MAX");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // func ::= MIN 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("MIN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // func ::= AVG 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("AVG");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // alter ::= ALTER TABLE NAME DROP NAME 
            {
              AlterExp RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AlterDropExp(Aleft,new Symbol(N),new Symbol(N1));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // alter ::= ALTER TABLE NAME ADD NAME data_type 
            {
              AlterExp RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AlterAddExp(Aleft,new Symbol(N),new Symbol(N1),dt);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // drop ::= DROP DATABASE NAME 
            {
              DropExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DropDatabaseExp(Dleft,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // drop ::= DROP INDEX NAME ON NAME 
            {
              DropExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DropIndexExp(Dleft,new Symbol(N2),new Symbol(N1));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // drop ::= DROP VIEW NAME 
            {
              DropExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DropViewExp(Dleft,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // drop ::= DROP TABLE namelist 
            {
              DropExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NameList n = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DropTableExp(Dleft,n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // update ::= UPDATE NAME SET assignlist 
            {
              UpdateExp RESULT =null;
		int Uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object U = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignList a = (AssignList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new UpdateExp(Uleft,new Symbol(N),a,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("update",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // update ::= UPDATE NAME SET assignlist WHERE bool_expr 
            {
              UpdateExp RESULT =null;
		int Uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object U = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssignList a = (AssignList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new UpdateExp(Uleft,new Symbol(N),a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("update",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // assignlist ::= assignment COMMA assignlist 
            {
              AssignList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignList al = (AssignList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AssignList(a,al);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignlist",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // assignlist ::= assignment 
            {
              AssignList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AssignList(a,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignlist",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assignment ::= NAME EQ value 
            {
              Assignment RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Assignment(Nleft,new Symbol(N),v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // delete ::= DELETE FROM NAME WHERE bool_expr 
            {
              DeleteExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DeleteExp(Dleft,new Symbol(N),b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delete",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // delete ::= DELETE FROM NAME 
            {
              DeleteExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DeleteExp(Dleft,new Symbol(N),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delete",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // namelist ::= NAME COMMA namelist 
            {
              NameList RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameList(Nleft,new Symbol(N),nl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // namelist ::= NAME 
            {
              NameList RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameList(Nleft,new Symbol(N),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // const_value_list ::= const_value COMMA const_value_list 
            {
              ConstValueList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstValue c = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValueList cl = (ConstValueList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueList(c,cl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // const_value_list ::= const_value 
            {
              ConstValueList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValue c = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueList(c,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // insert ::= INSERT INTO NAME namelist VALUES LPAREN const_value_list RPAREN 
            {
              InsertExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ConstValueList cl = (ConstValueList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new InsertExp(ileft,new Symbol(N),nl,cl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // insert ::= INSERT INTO NAME namelist VALUES LPAREN select RPAREN 
            {
              InsertExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new InsertExp(ileft,new Symbol(N),nl,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // insert ::= INSERT INTO NAME VALUES LPAREN select RPAREN 
            {
              InsertExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new InsertExp(ileft,new Symbol(N),s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // insert ::= INSERT INTO NAME VALUES LPAREN const_value_list RPAREN 
            {
              InsertExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ConstValueList cl = (ConstValueList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new InsertExp(ileft,new Symbol(N),cl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // const_value ::= NULL 
            {
              ConstValue RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueNull();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // const_value ::= FLOATVALUE 
            {
              ConstValue RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueFloat(fleft,f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // const_value ::= FALSE 
            {
              ConstValue RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueBoolean(tleft,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // const_value ::= TRUE 
            {
              ConstValue RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueBoolean(tleft,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // const_value ::= STRING 
            {
              ConstValue RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueString(sleft,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // const_value ::= INTVALUE 
            {
              ConstValue RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueInt(ileft,i.intValue());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asc_or_desc ::= DESC 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("DESC");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asc_or_desc",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // asc_or_desc ::= ASC 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("ASC");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asc_or_desc",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // asc_or_desc ::= 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("ASC");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asc_or_desc",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // order_list ::= col_name asc_or_desc order_list 
            {
              OrderList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ColName n = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OrderList o = (OrderList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OrderList(n,a,o);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // order_list ::= col_name asc_or_desc 
            {
              OrderList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ColName n = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OrderList(n,a,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // order_clause ::= ORDER BY order_list 
            {
              OrderClause RESULT =null;
		int olleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int olright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OrderList ol = (OrderList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrderClause(ol); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_clause",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // order_clause ::= 
            {
              OrderClause RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_clause",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // having_clause ::= HAVING bool_expr 
            {
              HavingClause RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp be = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new HavingClause(be); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("having_clause",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // having_clause ::= 
            {
              HavingClause RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("having_clause",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // group_clause ::= GROUP BY col_name 
            {
              GroupClause RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new GroupClause(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_clause",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // group_clause ::= 
            {
              GroupClause RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_clause",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // col_name ::= NAME DOT NAME 
            {
              ColName RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ColName(new Symbol(N1),new Symbol(N2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col_name",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // col_name ::= NAME 
            {
              ColName RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ColName(null,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col_name",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // where_clause ::= WHERE bool_expr 
            {
              WhereClause RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new WhereClause(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("where_clause",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // where_clause ::= 
            {
              WhereClause RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("where_clause",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // from_clause ::= FROM table_ref_list 
            {
              FromClause RESULT =null;
		int trlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableRefList trl = (TableRefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new FromClause(trl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("from_clause",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // from_clause ::= 
            {
              FromClause RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("from_clause",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // table_ref_list ::= table_ref COMMA table_ref_list 
            {
              TableRefList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TableRef t = (TableRef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int trlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableRefList trl = (TableRefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRefList(t,trl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // table_ref_list ::= table_ref 
            {
              TableRefList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableRef t = (TableRef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRefList(t,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // table_ref ::= LPAREN select RPAREN AS NAME 
            {
              TableRef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRef(null,new Symbol(N),s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // table_ref ::= NAME AS NAME 
            {
              TableRef RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRef(new Symbol(N1),new Symbol(N2),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // table_ref ::= NAME 
            {
              TableRef RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRef(new Symbol(N),null,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // as_or_not ::= AS NAME 
            {
              AsOrNot RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsOrNot(new Symbol(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("as_or_not",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // as_or_not ::= 
            {
              AsOrNot RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("as_or_not",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // distinct_or_not ::= DISTINCT 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("DISTINCT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("distinct_or_not",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // distinct_or_not ::= 
            {
              Symbol RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("distinct_or_not",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // select ::= SELECT distinct_or_not select_expr from_clause where_clause group_clause having_clause order_clause 
            {
              SelectExp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		SelectExpr s = (SelectExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		FromClause f = (FromClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WhereClause w = (WhereClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GroupClause g = (GroupClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HavingClause h = (HavingClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OrderClause o = (OrderClause)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SelectExp(d, s, f, w, g, h, o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // primary_key ::= PRIMARY KEY 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("PRIMARYKEY");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_key",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // primary_key ::= 
            {
              Symbol RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_key",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // auto_increasement ::= AUTO INCREMENT 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("AUTOINCREMENT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auto_increasement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // auto_increasement ::= 
            {
              Symbol RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auto_increasement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // null_or_not ::= NOT NULL 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("NOTNULL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("null_or_not",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // null_or_not ::= NULL 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("NULL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("null_or_not",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // null_or_not ::= 
            {
              Symbol RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("null_or_not",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // data_type ::= BOOLEAN 
            {
              DataType RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameTy( new Symbol("boolean"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // data_type ::= CHAR 
            {
              DataType RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ArrayTy( new Symbol("char"),1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // data_type ::= CHAR LPAREN INTVALUE RPAREN 
            {
              DataType RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object L = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer I = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ArrayTy( new Symbol("char"),(Integer)I);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // data_type ::= FLOAT 
            {
              DataType RESULT =null;
		int Fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameTy( new Symbol("float"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // data_type ::= INT 
            {
              DataType RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameTy( new Symbol("int"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // default_value ::= DEFAULT const_value 
            {
              ConstValue RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValue cv = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_value",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // default_value ::= 
            {
              ConstValue RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_value",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // column_definition ::= NAME data_type CHECK LPAREN bool_expr RPAREN 
            {
              ColumnDefinition RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dtyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dtyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DataType dty = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ColumnDefinition(ileft, new Symbol(i), dty, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_definition",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // column_definition ::= NAME data_type null_or_not default_value auto_increasement primary_key 
            {
              ColumnDefinition RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Symbol non = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstValue dv = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol ai = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pkright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol pk = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ColumnDefinition(Nleft,new Symbol(N),dt,pk,non,ai,dv); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_definition",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // create_element ::= FOREIGN KEY LPAREN NAME RPAREN REFERENCES NAME LPAREN NAME RPAREN 
            {
              CreateElement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String N2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new ForeignKeyDef(fleft,new Symbol(N),new ColName(new Symbol(N1),new Symbol(N2)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_element",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // create_element ::= PRIMARY KEY LPAREN namelist RPAREN 
            {
              CreateElement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NameList n = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new PrimaryKeyDef(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_element",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // create_element ::= CHECK LPAREN bool_expr RPAREN 
            {
              CreateElement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new CheckDef(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_element",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // create_element ::= column_definition 
            {
              CreateElement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColumnDefinition c = (ColumnDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_element",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // create_element_list ::= create_element COMMA create_element_list 
            {
              CreateElementList RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CreateElement c1 = (CreateElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CreateElementList c = (CreateElementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateElementList( c1,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_element_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // create_element_list ::= create_element 
            {
              CreateElementList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CreateElement c = (CreateElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateElementList( c,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_element_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // use ::= USE NAME 
            {
              UseDatabaseExp RESULT =null;
		int Uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object U = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new UseDatabaseExp(Uleft,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // create ::= CREATE NAME AS select 
            {
              CreateExp RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateViewExp(Cleft,new Symbol(N),s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // create ::= CREATE INDEX NAME ON NAME LPAREN NAME RPAREN 
            {
              CreateExp RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object O = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String N2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object L = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String N3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateIndexExp(Cleft,new Symbol(N1),new Symbol(N2),new Symbol(N3),false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // create ::= CREATE DATABASE NAME 
            {
              CreateExp RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateDatabaseExp(Cleft,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // create ::= CREATE TABLE NAME LPAREN create_element_list RPAREN 
            {
              CreateExp RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object T = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int LPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int LPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object LP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CreateElementList c = (CreateElementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int RPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int RPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object RP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateTableExp(Cleft,new Symbol(N),c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // privileges ::= privilege privileges 
            {
              Privileges RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Privilege p = (Privilege)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Privileges ps = (Privileges)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Privileges(p,ps);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("privileges",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // privileges ::= privilege 
            {
              Privileges RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Privilege p = (Privilege)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Privileges(p,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("privileges",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // grant ::= GRANT privileges ON namelist TO namelist WITH GRANT OPTION 
            {
              GrantExp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Privileges p = (Privileges)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameList n1 = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NameList n2 = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT=new GrantExp(p,n1,n2,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("grant",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // grant ::= GRANT privileges ON namelist TO namelist 
            {
              GrantExp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Privileges p = (Privileges)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NameList n1 = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NameList n2 = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new GrantExp(p,n1,n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("grant",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // describe ::= DESCRIBE namelist 
            {
              DescribeExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NameList n = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DescribeExp(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("describe",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sql ::= use SEMICOLON 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UseDatabaseExp u = (UseDatabaseExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=u;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sql ::= grant SEMICOLON 
            {
              Exp RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GrantExp g = (GrantExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=g;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sql ::= describe SEMICOLON 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DescribeExp d = (DescribeExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=d;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sql ::= alter SEMICOLON 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AlterExp a = (AlterExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sql ::= drop SEMICOLON 
            {
              Exp RESULT =null;
		int drleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DropExp dr = (DropExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=dr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sql ::= update SEMICOLON 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UpdateExp u = (UpdateExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=u;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sql ::= delete SEMICOLON 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeleteExp d = (DeleteExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=d;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sql ::= insert SEMICOLON 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InsertExp i = (InsertExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sql ::= select SEMICOLON 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sql ::= create SEMICOLON 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CreateExp c = (CreateExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sql_list ::= sql sql_list 
            {
              SQLList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SQLList l = (SQLList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SQLList(s,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sql_list ::= sql 
            {
              SQLList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SQLList(s,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // database ::= sql_list 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SQLList s = (SQLList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("database",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= database EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

