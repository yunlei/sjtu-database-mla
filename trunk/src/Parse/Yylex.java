/* The following code was generated by JFlex 1.4.3 on 11-7-13 下午8:55 */

package Parse; 
 
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11-7-13 下午8:55 from the specification file
 * <tt>C:/Users/think/Desktop/DB大作业/parser.flex</tt>
 */

class Lexer{
	Yylex yylex;
	ArrayList<java_cup.runtime.Symbol> list=new ArrayList<java_cup.runtime.Symbol>();
	private boolean haserror;
	
	private Iterator it;
	public Lexer(InputStream input) throws IOException{
		it=list.iterator();
		yylex=new Yylex(input);
		this.haserror=false;
		while(true){
			java_cup.runtime.Symbol symbol=yylex.nextToken();
			if(symbol.sym==sym.ERROR)
			{
				report_error(symbol);
			}
			else if(symbol.sym==sym.EOF)
			{
				list.add(symbol);
				break;
			}
			else 
				list.add(symbol);
		}
	}
	public java_cup.runtime.Symbol nextToken()
	{
		return (java_cup.runtime.Symbol)it.next();
	}
	public boolean hasNext()
	{
		if(it.hasNext()&&((java_cup.runtime.Symbol)it.next()).sym!=sym.EOF)
			return true;
		return false;
	}
	public void report_error(java_cup.runtime.Symbol symbol  )
	{
		this.haserror=true;
		System.out.print("lexical error @"+symbol.left+":"+symbol.value);
	}
	public boolean hasError()
	{
		return this.haserror;
	}
}

class Yylex   {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\45\0\1\54\1\0\1\2\1\57\1\60\1\52\1\50\1\55\1\51"+
    "\1\3\1\53\12\1\1\0\1\56\1\46\1\45\1\47\2\0\1\4"+
    "\1\16\1\15\1\11\1\7\1\23\1\32\1\31\1\22\1\43\1\25"+
    "\1\5\1\24\1\12\1\17\1\20\1\43\1\10\1\14\1\6\1\26"+
    "\1\27\1\30\1\21\1\13\1\43\4\0\1\44\1\0\1\40\3\43"+
    "\1\36\1\37\5\43\1\41\5\43\1\34\1\42\1\33\1\35\5\43"+
    "\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\27\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\1\1\22\1\0\3\5\1\23\21\5"+
    "\1\24\1\5\1\25\1\26\1\5\1\27\17\5\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\5\1\36\1\37"+
    "\1\40\1\41\1\5\1\42\12\5\1\43\2\5\1\44"+
    "\1\45\7\5\1\46\5\5\1\47\1\50\1\51\1\5"+
    "\1\52\11\5\1\53\1\54\5\5\1\55\1\5\1\56"+
    "\1\5\1\57\3\5\1\60\4\5\1\61\4\5\1\62"+
    "\3\5\1\63\3\5\1\64\1\5\1\65\1\66\10\5"+
    "\1\67\1\70\1\5\1\71\1\5\1\72\2\5\1\73"+
    "\1\74\2\5\1\75\1\5\1\76\1\77\1\100\1\101"+
    "\1\5\1\102\2\5\1\103\1\104\2\5\1\105\1\5"+
    "\1\106\1\107\1\110\1\5\1\111\1\5\1\112\1\113"+
    "\1\5\1\114\1\115\1\5\1\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\223\0\304\0\365\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\223\0\u052b\0\u055c\0\223"+
    "\0\223\0\223\0\223\0\223\0\223\0\223\0\223\0\223"+
    "\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4"+
    "\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c"+
    "\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4"+
    "\0\u0188\0\u0a25\0\u0a56\0\u0188\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\223\0\223\0\223"+
    "\0\223\0\u05ef\0\u0188\0\u0dc8\0\u0188\0\u0188\0\u0188\0\u0188"+
    "\0\u0df9\0\u0188\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f"+
    "\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u0188\0\u1014\0\u1045\0\u0188"+
    "\0\u0188\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c"+
    "\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u0188\0\u0188"+
    "\0\u0188\0\u12f3\0\u0188\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8"+
    "\0\u1419\0\u144a\0\u147b\0\u14ac\0\u0188\0\u0188\0\u14dd\0\u150e"+
    "\0\u153f\0\u1570\0\u15a1\0\u0188\0\u15d2\0\u0188\0\u1603\0\u0188"+
    "\0\u1634\0\u1665\0\u1696\0\u0188\0\u16c7\0\u16f8\0\u1729\0\u175a"+
    "\0\u0188\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u0188\0\u184f\0\u1880"+
    "\0\u18b1\0\u0188\0\u18e2\0\u1913\0\u1944\0\u0188\0\u1975\0\u0188"+
    "\0\u0188\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc"+
    "\0\u1afd\0\u0188\0\u0188\0\u1b2e\0\u0188\0\u1b5f\0\u0188\0\u1b90"+
    "\0\u1bc1\0\u0188\0\u0188\0\u1bf2\0\u1c23\0\u0188\0\u1c54\0\u0188"+
    "\0\u0188\0\u0188\0\u0188\0\u1c85\0\u0188\0\u1cb6\0\u1ce7\0\u0188"+
    "\0\u0188\0\u1d18\0\u1d49\0\u0188\0\u1d7a\0\u0188\0\u0188\0\u0188"+
    "\0\u1dab\0\u0188\0\u1ddc\0\u0188\0\u0188\0\u1e0d\0\u0188\0\u0188"+
    "\0\u1e3e\0\u0188";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\12\1\15\1\16\1\17\1\20"+
    "\1\21\1\12\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\3\12\1\34\4\12\1\0"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\2\51\1\52\56\51\1\0"+
    "\1\3\1\0\1\53\137\0\1\12\2\0\1\12\1\54"+
    "\3\12\1\55\1\56\1\12\1\57\11\12\1\60\1\61"+
    "\15\12\15\0\1\12\2\0\16\12\1\62\22\12\15\0"+
    "\1\12\2\0\1\63\40\12\15\0\1\12\2\0\10\12"+
    "\1\64\4\12\1\65\23\12\15\0\1\12\2\0\41\12"+
    "\15\0\1\12\2\0\1\66\2\12\1\67\1\70\11\12"+
    "\1\71\22\12\15\0\1\12\2\0\13\12\1\72\6\12"+
    "\1\73\16\12\15\0\1\12\2\0\3\12\1\74\16\12"+
    "\1\75\16\12\15\0\1\12\2\0\4\12\1\76\6\12"+
    "\1\77\11\12\1\100\13\12\15\0\1\12\2\0\7\12"+
    "\1\101\3\12\1\102\25\12\15\0\1\12\2\0\4\12"+
    "\1\103\1\12\1\104\32\12\15\0\1\12\2\0\4\12"+
    "\1\105\34\12\15\0\1\12\2\0\6\12\1\106\32\12"+
    "\15\0\1\12\2\0\1\12\1\107\2\12\1\110\34\12"+
    "\15\0\1\12\2\0\1\111\15\12\1\112\22\12\15\0"+
    "\1\12\2\0\3\12\1\113\35\12\15\0\1\12\2\0"+
    "\6\12\1\114\1\12\1\115\3\12\1\116\24\12\15\0"+
    "\1\12\2\0\1\117\15\12\1\120\22\12\15\0\1\12"+
    "\2\0\25\12\1\121\13\12\15\0\1\12\2\0\1\122"+
    "\40\12\15\0\1\12\2\0\4\12\1\123\34\12\15\0"+
    "\1\12\2\0\30\12\1\124\10\12\15\0\1\12\2\0"+
    "\34\12\1\125\4\12\61\0\1\126\1\0\1\127\56\0"+
    "\1\130\13\0\2\51\1\0\56\51\2\0\1\131\57\0"+
    "\1\132\60\0\1\12\2\0\1\12\1\133\1\134\36\12"+
    "\15\0\1\12\2\0\5\12\1\135\33\12\15\0\1\12"+
    "\2\0\5\12\1\136\1\12\1\137\31\12\15\0\1\12"+
    "\2\0\11\12\1\140\27\12\15\0\1\12\2\0\2\12"+
    "\1\141\36\12\15\0\1\12\2\0\26\12\1\142\12\12"+
    "\15\0\1\12\2\0\21\12\1\143\17\12\15\0\1\12"+
    "\2\0\12\12\1\144\26\12\15\0\1\12\2\0\11\12"+
    "\1\145\27\12\15\0\1\12\2\0\16\12\1\146\22\12"+
    "\15\0\1\12\2\0\2\12\1\147\36\12\15\0\1\12"+
    "\2\0\1\12\1\150\6\12\1\151\6\12\1\152\21\12"+
    "\15\0\1\12\2\0\13\12\1\153\25\12\15\0\1\12"+
    "\2\0\10\12\1\154\30\12\15\0\1\12\2\0\2\12"+
    "\1\155\36\12\15\0\1\12\2\0\1\12\1\156\37\12"+
    "\15\0\1\12\2\0\1\12\1\157\1\160\36\12\15\0"+
    "\1\12\2\0\20\12\1\161\20\12\15\0\1\12\2\0"+
    "\3\12\1\162\35\12\15\0\1\12\2\0\22\12\1\163"+
    "\16\12\15\0\1\12\2\0\1\164\2\12\1\165\35\12"+
    "\15\0\1\12\2\0\13\12\1\166\25\12\15\0\1\12"+
    "\2\0\5\12\1\167\33\12\15\0\1\12\2\0\16\12"+
    "\1\170\22\12\15\0\1\12\2\0\2\12\1\171\2\12"+
    "\1\172\2\12\1\173\1\174\27\12\15\0\1\12\2\0"+
    "\13\12\1\175\25\12\15\0\1\12\2\0\13\12\1\176"+
    "\25\12\15\0\1\12\2\0\15\12\1\177\23\12\15\0"+
    "\1\12\2\0\6\12\1\200\32\12\15\0\1\12\2\0"+
    "\7\12\1\201\31\12\15\0\1\12\2\0\16\12\1\202"+
    "\22\12\15\0\1\12\2\0\3\12\1\203\35\12\15\0"+
    "\1\12\2\0\5\12\1\204\33\12\15\0\1\12\2\0"+
    "\1\12\1\205\37\12\15\0\1\12\2\0\3\12\1\206"+
    "\35\12\15\0\1\12\2\0\3\12\1\207\35\12\15\0"+
    "\1\12\2\0\23\12\1\210\15\12\15\0\1\12\2\0"+
    "\13\12\1\211\25\12\15\0\1\12\2\0\31\12\1\212"+
    "\7\12\15\0\1\12\2\0\35\12\1\213\3\12\15\0"+
    "\1\12\2\0\3\12\1\214\35\12\15\0\1\12\2\0"+
    "\13\12\1\215\25\12\15\0\1\12\2\0\3\12\1\216"+
    "\35\12\15\0\1\12\2\0\1\12\1\217\37\12\15\0"+
    "\1\12\2\0\1\220\40\12\15\0\1\12\2\0\10\12"+
    "\1\221\30\12\15\0\1\12\2\0\1\222\40\12\15\0"+
    "\1\12\2\0\3\12\1\223\35\12\15\0\1\12\2\0"+
    "\11\12\1\224\27\12\15\0\1\12\2\0\1\225\40\12"+
    "\15\0\1\12\2\0\14\12\1\226\24\12\15\0\1\12"+
    "\2\0\2\12\1\227\36\12\15\0\1\12\2\0\1\12"+
    "\1\230\37\12\15\0\1\12\2\0\3\12\1\231\35\12"+
    "\15\0\1\12\2\0\1\232\40\12\15\0\1\12\2\0"+
    "\6\12\1\233\32\12\15\0\1\12\2\0\4\12\1\234"+
    "\34\12\15\0\1\12\2\0\11\12\1\235\27\12\15\0"+
    "\1\12\2\0\1\12\1\236\37\12\15\0\1\12\2\0"+
    "\3\12\1\237\35\12\15\0\1\12\2\0\20\12\1\240"+
    "\20\12\15\0\1\12\2\0\13\12\1\241\25\12\15\0"+
    "\1\12\2\0\3\12\1\242\35\12\15\0\1\12\2\0"+
    "\3\12\1\243\35\12\15\0\1\12\2\0\4\12\1\244"+
    "\34\12\15\0\1\12\2\0\1\245\40\12\15\0\1\12"+
    "\2\0\20\12\1\246\20\12\15\0\1\12\2\0\13\12"+
    "\1\247\25\12\15\0\1\12\2\0\1\250\40\12\15\0"+
    "\1\12\2\0\22\12\1\251\16\12\15\0\1\12\2\0"+
    "\24\12\1\252\14\12\15\0\1\12\2\0\4\12\1\253"+
    "\34\12\15\0\1\12\2\0\16\12\1\254\22\12\15\0"+
    "\1\12\2\0\22\12\1\255\16\12\15\0\1\12\2\0"+
    "\32\12\1\256\6\12\15\0\1\12\2\0\36\12\1\257"+
    "\2\12\15\0\1\12\2\0\4\12\1\260\34\12\15\0"+
    "\1\12\2\0\3\12\1\261\35\12\15\0\1\12\2\0"+
    "\14\12\1\262\24\12\15\0\1\12\2\0\2\12\1\263"+
    "\36\12\15\0\1\12\2\0\12\12\1\264\26\12\15\0"+
    "\1\12\2\0\2\12\1\265\36\12\15\0\1\12\2\0"+
    "\22\12\1\266\16\12\15\0\1\12\2\0\16\12\1\267"+
    "\22\12\15\0\1\12\2\0\11\12\1\270\27\12\15\0"+
    "\1\12\2\0\2\12\1\271\36\12\15\0\1\12\2\0"+
    "\2\12\1\272\36\12\15\0\1\12\2\0\21\12\1\273"+
    "\17\12\15\0\1\12\2\0\3\12\1\274\35\12\15\0"+
    "\1\12\2\0\4\12\1\275\34\12\15\0\1\12\2\0"+
    "\1\276\40\12\15\0\1\12\2\0\15\12\1\277\23\12"+
    "\15\0\1\12\2\0\4\12\1\300\34\12\15\0\1\12"+
    "\2\0\3\12\1\301\35\12\15\0\1\12\2\0\2\12"+
    "\1\302\36\12\15\0\1\12\2\0\6\12\1\303\32\12"+
    "\15\0\1\12\2\0\2\12\1\304\36\12\15\0\1\12"+
    "\2\0\3\12\1\305\35\12\15\0\1\12\2\0\3\12"+
    "\1\306\35\12\15\0\1\12\2\0\6\12\1\307\32\12"+
    "\15\0\1\12\2\0\14\12\1\310\24\12\15\0\1\12"+
    "\2\0\32\12\1\311\6\12\15\0\1\12\2\0\3\12"+
    "\1\312\35\12\15\0\1\12\2\0\10\12\1\313\30\12"+
    "\15\0\1\12\2\0\1\314\40\12\15\0\1\12\2\0"+
    "\3\12\1\315\35\12\15\0\1\12\2\0\1\12\1\316"+
    "\37\12\15\0\1\12\2\0\6\12\1\317\32\12\15\0"+
    "\1\12\2\0\2\12\1\320\36\12\15\0\1\12\2\0"+
    "\3\12\1\321\35\12\15\0\1\12\2\0\1\322\40\12"+
    "\15\0\1\12\2\0\4\12\1\323\34\12\15\0\1\12"+
    "\2\0\2\12\1\324\36\12\15\0\1\12\2\0\20\12"+
    "\1\325\20\12\15\0\1\12\2\0\3\12\1\326\35\12"+
    "\15\0\1\12\2\0\10\12\1\327\30\12\15\0\1\12"+
    "\2\0\26\12\1\330\12\12\15\0\1\12\2\0\10\12"+
    "\1\331\30\12\15\0\1\12\2\0\2\12\1\332\36\12"+
    "\15\0\1\12\2\0\11\12\1\333\27\12\15\0\1\12"+
    "\2\0\6\12\1\334\32\12\15\0\1\12\2\0\7\12"+
    "\1\335\31\12\15\0\1\12\2\0\3\12\1\336\35\12"+
    "\15\0\1\12\2\0\3\12\1\337\35\12\15\0\1\12"+
    "\2\0\2\12\1\340\36\12\15\0\1\12\2\0\6\12"+
    "\1\341\32\12\15\0\1\12\2\0\2\12\1\342\36\12"+
    "\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7791];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\2\11\27\1\1\11\2\1\11\11\2\1"+
    "\1\0\52\1\4\11\211\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
 StringBuffer string = new StringBuffer();

 private java_cup.runtime.Symbol nextToken(int kind, Object value) {
	return new java_cup.runtime.Symbol(kind, yychar, yychar+yylength(),value);
}

private java_cup.runtime.Symbol nextToken(int kind){
	return nextToken(kind,yytext());
}
 



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 41: 
          { return nextToken(sym.KEY);
          }
        case 79: break;
        case 16: 
          { return nextToken(sym.LPAREN);
          }
        case 80: break;
        case 44: 
          { return nextToken(sym.LIKE);
          }
        case 81: break;
        case 68: 
          { return nextToken(sym.CREATE);
          }
        case 82: break;
        case 21: 
          { return nextToken(sym.OR);
          }
        case 83: break;
        case 27: 
          { string.append("'");
          }
        case 84: break;
        case 62: 
          { return nextToken(sym.GROUP);
          }
        case 85: break;
        case 40: 
          { return nextToken(sym.MIN);
          }
        case 86: break;
        case 66: 
          { return nextToken(sym.DELETE);
          }
        case 87: break;
        case 48: 
          { return nextToken(sym.CHAR);
          }
        case 88: break;
        case 42: 
          { return nextToken(sym.USE);
          }
        case 89: break;
        case 32: 
          { return nextToken(sym.ANY);
          }
        case 90: break;
        case 3: 
          { string.setLength(0);yybegin(STRING);
          }
        case 91: break;
        case 22: 
          { return nextToken(sym.ON);
          }
        case 92: break;
        case 67: 
          { return nextToken(sym.SELECT);
          }
        case 93: break;
        case 26: 
          { return nextToken(sym.GE);
          }
        case 94: break;
        case 50: 
          { return nextToken(sym.FROM);
          }
        case 95: break;
        case 11: 
          { return nextToken(sym.TIMES);
          }
        case 96: break;
        case 57: 
          { return nextToken(sym.ORDER);
          }
        case 97: break;
        case 37: 
          { return nextToken(sym.SUM);
          }
        case 98: break;
        case 18: 
          { yybegin(YYINITIAL);
                       return nextToken(sym.STRING,string.toString());
          }
        case 99: break;
        case 72: 
          { return nextToken(sym.HAVING);
          }
        case 100: break;
        case 78: 
          { return nextToken(sym.INCREMENT);
          }
        case 101: break;
        case 24: 
          { return nextToken(sym.LE);
          }
        case 102: break;
        case 71: 
          { return nextToken(sym.VALUES);
          }
        case 103: break;
        case 64: 
          { return nextToken(sym.ESCAPE);
          }
        case 104: break;
        case 69: 
          { return nextToken(sym.INSERT);
          }
        case 105: break;
        case 76: 
          { return nextToken(sym.DATABASE);
          }
        case 106: break;
        case 20: 
          { return nextToken(sym.BY);
          }
        case 107: break;
        case 58: 
          { return nextToken(sym.INDEX);
          }
        case 108: break;
        case 29: 
          { return nextToken(sym.ALL);
          }
        case 109: break;
        case 2: 
          { return nextToken(sym.INTVALUE,new Integer(yytext()));
          }
        case 110: break;
        case 63: 
          { return nextToken(sym.FALSE);
          }
        case 111: break;
        case 1: 
          { string.append(yytext());
          }
        case 112: break;
        case 49: 
          { return nextToken(sym.INTO);
          }
        case 113: break;
        case 30: 
          { return nextToken(sym.ADD);
          }
        case 114: break;
        case 13: 
          { return nextToken(sym.MOD);
          }
        case 115: break;
        case 39: 
          { return nextToken(sym.MAX);
          }
        case 116: break;
        case 15: 
          { return nextToken(sym.SEMICOLON);
          }
        case 117: break;
        case 70: 
          { return nextToken(sym.UPDATE);
          }
        case 118: break;
        case 59: 
          { return nextToken(sym.FLOAT);
          }
        case 119: break;
        case 74: 
          { return nextToken(sym.BOOLEAN);
          }
        case 120: break;
        case 19: 
          { return nextToken(sym.AS);
          }
        case 121: break;
        case 36: 
          { return nextToken(sym.SET);
          }
        case 122: break;
        case 75: 
          { return nextToken(sym.PRIMARY);
          }
        case 123: break;
        case 28: 
          { return nextToken(sym.FLOATVALUE,new Float(yytext()));
          }
        case 124: break;
        case 54: 
          { return nextToken(sym.TABLE);
          }
        case 125: break;
        case 65: 
          { return nextToken(sym.EXISTS);
          }
        case 126: break;
        case 25: 
          { return nextToken(sym.NEQ);
          }
        case 127: break;
        case 53: 
          { return nextToken(sym.ALTER);
          }
        case 128: break;
        case 10: 
          { return nextToken(sym.MINUS);
          }
        case 129: break;
        case 61: 
          { return nextToken(sym.WHERE);
          }
        case 130: break;
        case 4: 
          { return nextToken(sym.DOT);
          }
        case 131: break;
        case 8: 
          { return nextToken(sym.GT);
          }
        case 132: break;
        case 5: 
          { return nextToken(sym.NAME,yytext());
          }
        case 133: break;
        case 38: 
          { return nextToken(sym.INT);
          }
        case 134: break;
        case 73: 
          { return nextToken(sym.DEFAULT);
          }
        case 135: break;
        case 45: 
          { return nextToken(sym.DESC);
          }
        case 136: break;
        case 6: 
          { return nextToken(sym.EQ);
          }
        case 137: break;
        case 31: 
          { return nextToken(sym.AND);
          }
        case 138: break;
        case 56: 
          { return nextToken(sym.CHECK);
          }
        case 139: break;
        case 46: 
          { return nextToken(sym.DROP);
          }
        case 140: break;
        case 52: 
          { return nextToken(sym.TRUE);
          }
        case 141: break;
        case 12: 
          { return nextToken(sym.DIVIDE);
          }
        case 142: break;
        case 35: 
          { return nextToken(sym.NOT);
          }
        case 143: break;
        case 51: 
          { return nextToken(sym.VIEW);
          }
        case 144: break;
        case 47: 
          { return nextToken(sym.NULL);
          }
        case 145: break;
        case 7: 
          { return nextToken(sym.LT);
          }
        case 146: break;
        case 9: 
          { return nextToken(sym.PLUS);
          }
        case 147: break;
        case 34: 
          { return nextToken(sym.AVG);
          }
        case 148: break;
        case 55: 
          { return nextToken(sym.COUNT);
          }
        case 149: break;
        case 17: 
          { return nextToken(sym.RPAREN);
          }
        case 150: break;
        case 43: 
          { return nextToken(sym.AUTO);
          }
        case 151: break;
        case 77: 
          { return nextToken(sym.DISTINCT);
          }
        case 152: break;
        case 33: 
          { return nextToken(sym.ASC);
          }
        case 153: break;
        case 60: 
          { return nextToken(sym.UNION);
          }
        case 154: break;
        case 23: 
          { return nextToken(sym.IN);
          }
        case 155: break;
        case 14: 
          { return nextToken(sym.COMMA);
          }
        case 156: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	{
       if(yystate()==STRING) return nextToken(sym.ERROR);
	 else return nextToken(sym.EOF, null);
        }
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
