
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 27 21:28:45 IRKST 2011
//----------------------------------------------------

package Parse;

import Absyn.*;

import java.util.ArrayList;
import Symbol.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 27 21:28:45 IRKST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\005\010\000\002" +
    "\005\005\000\002\005\004\000\002\005\012\000\002\005" +
    "\006\000\002\014\003\000\002\014\005\000\002\015\003" +
    "\000\002\016\010\000\002\016\010\000\002\043\002\000" +
    "\002\043\004\000\002\044\003\000\002\044\003\000\002" +
    "\044\006\000\002\044\003\000\002\017\002\000\002\017" +
    "\003\000\002\017\004\000\002\045\002\000\002\045\004" +
    "\000\002\020\002\000\002\020\004\000\002\006\012\000" +
    "\002\022\002\000\002\022\003\000\002\024\002\000\002" +
    "\024\004\000\002\026\003\000\002\026\005\000\002\026" +
    "\007\000\002\046\003\000\002\046\005\000\002\025\002" +
    "\000\002\025\004\000\002\027\002\000\002\027\004\000" +
    "\002\030\003\000\002\030\005\000\002\031\002\000\002" +
    "\031\005\000\002\032\002\000\002\032\004\000\002\033" +
    "\002\000\002\033\005\000\002\047\004\000\002\047\005" +
    "\000\002\051\002\000\002\051\003\000\002\051\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\007" +
    "\011\000\002\007\011\000\002\007\012\000\002\007\012" +
    "\000\002\050\003\000\002\050\004\000\002\035\003\000" +
    "\002\035\004\000\002\010\005\000\002\010\007\000\002" +
    "\036\005\000\002\037\003\000\002\037\004\000\002\011" +
    "\010\000\002\011\006\000\002\012\005\000\002\012\005" +
    "\000\002\012\007\000\002\012\005\000\002\013\010\000" +
    "\002\013\007\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\040" +
    "\005\000\002\040\003\000\002\040\003\000\002\040\005" +
    "\000\002\040\005\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\006\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\006\000" +
    "\002\021\007\000\002\021\007\000\002\021\010\000\002" +
    "\021\010\000\002\021\010\000\002\021\005\000\002\021" +
    "\005\000\002\021\007\000\002\021\002\000\002\021\006" +
    "\000\002\023\003\000\002\023\004\000\002\023\006\000" +
    "\002\023\004\000\002\023\006\000\002\006\011\000\002" +
    "\006\012\000\002\006\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\024\010\020\020\014\021\025\023\021\031" +
    "\016\044\006\046\026\064\011\106\023\001\002\000\004" +
    "\105\u0115\001\002\000\004\105\u0114\001\002\000\040\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\036\uffde\052\uffde\053\uffde" +
    "\054\uffde\055\uffde\056\uffde\062\uffde\063\uffde\064\uffde\072" +
    "\uffde\113\346\001\002\000\004\002\000\001\002\000\004" +
    "\105\345\001\002\000\006\044\006\064\011\001\002\000" +
    "\004\105\342\001\002\000\004\105\341\001\002\000\012" +
    "\004\274\024\272\030\271\045\273\001\002\000\004\002" +
    "\270\001\002\000\004\032\245\001\002\000\004\105\244" +
    "\001\002\000\004\045\226\001\002\000\012\024\215\030" +
    "\214\045\217\047\216\001\002\000\026\002\uffff\010\020" +
    "\020\014\021\025\023\021\031\016\044\006\046\026\064" +
    "\011\106\023\001\002\000\004\004\212\001\002\000\004" +
    "\105\211\001\002\000\004\027\205\001\002\000\004\004" +
    "\027\001\002\000\004\043\030\001\002\000\004\004\032" +
    "\001\002\000\006\051\121\105\uffb0\001\002\000\004\102" +
    "\035\001\002\000\010\004\032\051\uffb3\105\uffb3\001\002" +
    "\000\006\051\uffb2\105\uffb2\001\002\000\034\004\056\005" +
    "\047\006\046\007\054\036\045\052\036\053\040\054\055" +
    "\055\042\056\037\062\044\063\050\064\053\001\002\000" +
    "\004\064\uffa9\001\002\000\004\064\uffa5\001\002\000\004" +
    "\064\uffa6\001\002\000\004\064\116\001\002\000\004\064" +
    "\uffa7\001\002\000\066\004\uffa3\013\uffa3\015\uffa3\027\uffa3" +
    "\034\uffa3\035\uffa3\040\uffa3\041\uffa3\051\uffa3\065\uffa3\071" +
    "\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3" +
    "\100\uffa3\101\uffa3\102\uffa3\103\uffa3\105\uffa3\107\uffa3\114" +
    "\uffa3\115\uffa3\116\uffa3\001\002\000\106\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\013\uffc2\015\uffc2\027\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\040\uffc2\041\uffc2\042\uffc2\051\uffc2\062\uffc2" +
    "\063\uffc2\065\uffc2\066\uffc2\071\uffc2\072\uffc2\073\uffc2\074" +
    "\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2" +
    "\103\uffc2\105\uffc2\107\uffc2\114\uffc2\115\uffc2\116\uffc2\001" +
    "\002\000\106\004\uffbf\005\uffbf\006\uffbf\007\uffbf\013\uffbf" +
    "\015\uffbf\027\uffbf\034\uffbf\035\uffbf\036\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\051\uffbf\062\uffbf\063\uffbf\065\uffbf\066\uffbf" +
    "\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077" +
    "\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf\105\uffbf\107\uffbf" +
    "\114\uffbf\115\uffbf\116\uffbf\001\002\000\106\004\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\013\uffc4\015\uffc4\027\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\040\uffc4\041\uffc4\042\uffc4\051\uffc4\062" +
    "\uffc4\063\uffc4\065\uffc4\066\uffc4\071\uffc4\072\uffc4\073\uffc4" +
    "\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\102" +
    "\uffc4\103\uffc4\105\uffc4\107\uffc4\114\uffc4\115\uffc4\116\uffc4" +
    "\001\002\000\106\004\uffc3\005\uffc3\006\uffc3\007\uffc3\013" +
    "\uffc3\015\uffc3\027\uffc3\034\uffc3\035\uffc3\036\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\051\uffc3\062\uffc3\063\uffc3\065\uffc3\066" +
    "\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3" +
    "\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\105\uffc3\107" +
    "\uffc3\114\uffc3\115\uffc3\116\uffc3\001\002\000\106\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\013\uffc1\015\uffc1\027\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\040\uffc1\041\uffc1\042\uffc1\051\uffc1" +
    "\062\uffc1\063\uffc1\065\uffc1\066\uffc1\071\uffc1\072\uffc1\073" +
    "\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1" +
    "\102\uffc1\103\uffc1\105\uffc1\107\uffc1\114\uffc1\115\uffc1\116" +
    "\uffc1\001\002\000\066\004\uffa2\013\uffa2\015\uffa2\027\uffa2" +
    "\034\uffa2\035\uffa2\040\uffa2\041\uffa2\051\uffa2\065\uffa2\071" +
    "\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2" +
    "\100\uffa2\101\uffa2\102\uffa2\103\uffa2\105\uffa2\107\uffa2\114" +
    "\uffa2\115\uffa2\116\uffa2\001\002\000\022\004\uffb4\051\uffb4" +
    "\071\066\072\071\073\067\074\070\075\064\105\uffb4\001" +
    "\002\000\036\004\056\005\047\006\046\007\054\036\045" +
    "\044\006\052\036\053\040\054\055\055\042\056\037\062" +
    "\044\063\050\064\061\001\002\000\106\004\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\013\uffc0\015\uffc0\027\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\040\uffc0\041\uffc0\042\uffc0\051\uffc0\062\uffc0" +
    "\063\uffc0\065\uffc0\066\uffc0\071\uffc0\072\uffc0\073\uffc0\074" +
    "\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0" +
    "\103\uffc0\105\uffc0\107\uffc0\114\uffc0\115\uffc0\116\uffc0\001" +
    "\002\000\004\064\uffa8\001\002\000\074\004\uffd1\013\uffd1" +
    "\015\uffd1\016\uffd1\022\uffd1\027\uffd1\034\uffd1\035\uffd1\040" +
    "\uffd1\041\uffd1\051\uffd1\065\uffd1\070\057\071\uffd1\072\uffd1" +
    "\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101" +
    "\uffd1\102\uffd1\103\uffd1\105\uffd1\107\uffd1\114\uffd1\115\uffd1" +
    "\116\uffd1\001\002\000\004\004\060\001\002\000\072\004" +
    "\uffd0\013\uffd0\015\uffd0\016\uffd0\022\uffd0\027\uffd0\034\uffd0" +
    "\035\uffd0\040\uffd0\041\uffd0\051\uffd0\065\uffd0\071\uffd0\072" +
    "\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0" +
    "\101\uffd0\102\uffd0\103\uffd0\105\uffd0\107\uffd0\114\uffd0\115" +
    "\uffd0\116\uffd0\001\002\000\036\004\056\005\047\006\046" +
    "\007\054\036\045\044\006\052\036\053\040\054\055\055" +
    "\042\056\037\062\044\063\050\064\061\001\002\000\004" +
    "\065\077\001\002\000\016\065\065\071\066\072\071\073" +
    "\067\074\070\075\064\001\002\000\034\004\056\005\047" +
    "\006\046\007\054\036\045\052\036\053\040\054\055\055" +
    "\042\056\037\062\044\063\050\064\053\001\002\000\066" +
    "\004\uffa4\013\uffa4\015\uffa4\027\uffa4\034\uffa4\035\uffa4\040" +
    "\uffa4\041\uffa4\051\uffa4\065\uffa4\071\uffa4\072\uffa4\073\uffa4" +
    "\074\uffa4\075\uffa4\076\uffa4\077\uffa4\100\uffa4\101\uffa4\102" +
    "\uffa4\103\uffa4\105\uffa4\107\uffa4\114\uffa4\115\uffa4\116\uffa4" +
    "\001\002\000\034\004\056\005\047\006\046\007\054\036" +
    "\045\052\036\053\040\054\055\055\042\056\037\062\044" +
    "\063\050\064\053\001\002\000\034\004\056\005\047\006" +
    "\046\007\054\036\045\052\036\053\040\054\055\055\042" +
    "\056\037\062\044\063\050\064\053\001\002\000\034\004" +
    "\056\005\047\006\046\007\054\036\045\052\036\053\040" +
    "\054\055\055\042\056\037\062\044\063\050\064\053\001" +
    "\002\000\034\004\056\005\047\006\046\007\054\036\045" +
    "\052\036\053\040\054\055\055\042\056\037\062\044\063" +
    "\050\064\053\001\002\000\066\004\uff9f\013\uff9f\015\uff9f" +
    "\027\uff9f\034\uff9f\035\uff9f\040\uff9f\041\uff9f\051\uff9f\065" +
    "\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f" +
    "\077\uff9f\100\uff9f\101\uff9f\102\uff9f\103\uff9f\105\uff9f\107" +
    "\uff9f\114\uff9f\115\uff9f\116\uff9f\001\002\000\066\004\uff9e" +
    "\013\uff9e\015\uff9e\027\uff9e\034\uff9e\035\uff9e\040\uff9e\041" +
    "\uff9e\051\uff9e\065\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e" +
    "\075\uff9e\076\uff9e\077\uff9e\100\uff9e\101\uff9e\102\uff9e\103" +
    "\uff9e\105\uff9e\107\uff9e\114\uff9e\115\uff9e\116\uff9e\001\002" +
    "\000\066\004\uffa0\013\uffa0\015\uffa0\027\uffa0\034\uffa0\035" +
    "\uffa0\040\uffa0\041\uffa0\051\uffa0\065\uffa0\071\uffa0\072\071" +
    "\073\uffa0\074\070\075\064\076\uffa0\077\uffa0\100\uffa0\101" +
    "\uffa0\102\uffa0\103\uffa0\105\uffa0\107\uffa0\114\uffa0\115\uffa0" +
    "\116\uffa0\001\002\000\066\004\uffa1\013\uffa1\015\uffa1\027" +
    "\uffa1\034\uffa1\035\uffa1\040\uffa1\041\uffa1\051\uffa1\065\uffa1" +
    "\071\uffa1\072\071\073\uffa1\074\070\075\064\076\uffa1\077" +
    "\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1\105\uffa1\107\uffa1" +
    "\114\uffa1\115\uffa1\116\uffa1\001\002\000\066\004\uff9d\013" +
    "\uff9d\015\uff9d\027\uff9d\034\uff9d\035\uff9d\040\uff9d\041\uff9d" +
    "\051\uff9d\065\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075" +
    "\uff9d\076\uff9d\077\uff9d\100\uff9d\101\uff9d\102\uff9d\103\uff9d" +
    "\105\uff9d\107\uff9d\114\uff9d\115\uff9d\116\uff9d\001\002\000" +
    "\066\004\uff9c\013\uff9c\015\uff9c\027\uff9c\034\uff9c\035\uff9c" +
    "\040\uff9c\041\uff9c\051\uff9c\065\uff9c\071\uff9c\072\uff9c\073" +
    "\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c" +
    "\102\uff9c\103\uff9c\105\uff9c\107\uff9c\114\uff9c\115\uff9c\116" +
    "\uff9c\001\002\000\004\065\101\001\002\000\042\034\uff9c" +
    "\035\uff9c\065\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075" +
    "\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c\102\uff9c\103\uff9c" +
    "\104\102\116\uff9c\001\002\000\006\012\103\064\104\001" +
    "\002\000\004\064\113\001\002\000\006\044\006\064\011" +
    "\001\002\000\004\065\106\001\002\000\010\065\uff81\104" +
    "\107\105\uff81\001\002\000\004\064\110\001\002\000\006" +
    "\044\006\064\011\001\002\000\004\065\112\001\002\000" +
    "\006\065\uff7f\105\uff7f\001\002\000\006\044\006\064\011" +
    "\001\002\000\004\065\115\001\002\000\006\065\uff80\105" +
    "\uff80\001\002\000\004\004\056\001\002\000\004\065\120" +
    "\001\002\000\066\004\uff9b\013\uff9b\015\uff9b\027\uff9b\034" +
    "\uff9b\035\uff9b\040\uff9b\041\uff9b\051\uff9b\065\uff9b\071\uff9b" +
    "\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b\100" +
    "\uff9b\101\uff9b\102\uff9b\103\uff9b\105\uff9b\107\uff9b\114\uff9b" +
    "\115\uff9b\116\uff9b\001\002\000\046\004\056\005\047\006" +
    "\046\007\054\013\uff88\026\126\035\122\036\045\040\uff88" +
    "\052\036\053\040\054\055\055\042\056\037\062\044\063" +
    "\050\064\123\105\uff88\001\002\000\004\026\201\001\002" +
    "\000\050\004\056\005\047\006\046\007\054\013\uff88\026" +
    "\126\035\122\036\045\040\uff88\044\006\052\036\053\040" +
    "\054\055\055\042\056\037\062\044\063\050\064\175\065" +
    "\uff88\001\002\000\010\013\171\040\172\105\uffb1\001\002" +
    "\000\036\034\143\035\141\071\066\072\071\073\067\074" +
    "\070\075\064\076\142\077\140\100\137\101\134\102\136" +
    "\103\135\116\133\001\002\000\004\064\127\001\002\000" +
    "\006\044\006\064\011\001\002\000\004\065\131\001\002" +
    "\000\020\013\uff91\040\uff91\041\uff91\065\uff91\105\uff91\114" +
    "\uff91\115\uff91\001\002\000\040\004\056\005\047\006\046" +
    "\007\054\012\160\014\161\036\045\052\036\053\040\054" +
    "\055\055\042\056\037\062\044\063\050\064\053\001\002" +
    "\000\004\064\155\001\002\000\040\004\uff96\005\uff96\006" +
    "\uff96\007\uff96\012\uff96\014\uff96\036\uff96\052\uff96\053\uff96" +
    "\054\uff96\055\uff96\056\uff96\062\uff96\063\uff96\064\uff96\001" +
    "\002\000\040\004\uff95\005\uff95\006\uff95\007\uff95\012\uff95" +
    "\014\uff95\036\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056" +
    "\uff95\062\uff95\063\uff95\064\uff95\001\002\000\040\004\uff98" +
    "\005\uff98\006\uff98\007\uff98\012\uff98\014\uff98\036\uff98\052" +
    "\uff98\053\uff98\054\uff98\055\uff98\056\uff98\062\uff98\063\uff98" +
    "\064\uff98\001\002\000\040\004\uff97\005\uff97\006\uff97\007" +
    "\uff97\012\uff97\014\uff97\036\uff97\052\uff97\053\uff97\054\uff97" +
    "\055\uff97\056\uff97\062\uff97\063\uff97\064\uff97\001\002\000" +
    "\040\004\uff99\005\uff99\006\uff99\007\uff99\012\uff99\014\uff99" +
    "\036\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\062" +
    "\uff99\063\uff99\064\uff99\001\002\000\006\034\147\116\150" +
    "\001\002\000\040\004\uff9a\005\uff9a\006\uff9a\007\uff9a\012" +
    "\uff9a\014\uff9a\036\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a" +
    "\056\uff9a\062\uff9a\063\uff9a\064\uff9a\001\002\000\004\005" +
    "\144\001\002\000\022\013\uff8a\025\145\040\uff8a\041\uff8a" +
    "\065\uff8a\105\uff8a\114\uff8a\115\uff8a\001\002\000\004\005" +
    "\146\001\002\000\020\013\uff89\040\uff89\041\uff89\065\uff89" +
    "\105\uff89\114\uff89\115\uff89\001\002\000\004\005\154\001" +
    "\002\000\004\064\151\001\002\000\006\044\006\064\011" +
    "\001\002\000\004\065\153\001\002\000\020\013\uff8e\040" +
    "\uff8e\041\uff8e\065\uff8e\105\uff8e\114\uff8e\115\uff8e\001\002" +
    "\000\020\013\uff87\040\uff87\041\uff87\065\uff87\105\uff87\114" +
    "\uff87\115\uff87\001\002\000\006\044\006\064\011\001\002" +
    "\000\004\065\157\001\002\000\020\013\uff8f\040\uff8f\041" +
    "\uff8f\065\uff8f\105\uff8f\114\uff8f\115\uff8f\001\002\000\004" +
    "\064\166\001\002\000\004\064\163\001\002\000\032\013" +
    "\uff94\040\uff94\041\uff94\065\uff94\071\066\072\071\073\067" +
    "\074\070\075\064\105\uff94\114\uff94\115\uff94\001\002\000" +
    "\006\044\006\064\011\001\002\000\004\065\165\001\002" +
    "\000\020\013\uff8d\040\uff8d\041\uff8d\065\uff8d\105\uff8d\114" +
    "\uff8d\115\uff8d\001\002\000\006\044\006\064\011\001\002" +
    "\000\004\065\170\001\002\000\020\013\uff8c\040\uff8c\041" +
    "\uff8c\065\uff8c\105\uff8c\114\uff8c\115\uff8c\001\002\000\056" +
    "\004\056\005\047\006\046\007\054\013\uff88\026\126\035" +
    "\122\036\045\040\uff88\041\uff88\052\036\053\040\054\055" +
    "\055\042\056\037\062\044\063\050\064\123\065\uff88\105" +
    "\uff88\114\uff88\115\uff88\001\002\000\056\004\056\005\047" +
    "\006\046\007\054\013\uff88\026\126\035\122\036\045\040" +
    "\uff88\041\uff88\052\036\053\040\054\055\055\042\056\037" +
    "\062\044\063\050\064\123\065\uff88\105\uff88\114\uff88\115" +
    "\uff88\001\002\000\020\013\171\040\uff92\041\uff92\065\uff92" +
    "\105\uff92\114\uff92\115\uff92\001\002\000\020\013\uff93\040" +
    "\uff93\041\uff93\065\uff93\105\uff93\114\uff93\115\uff93\001\002" +
    "\000\050\004\056\005\047\006\046\007\054\013\uff88\026" +
    "\126\035\122\036\045\040\uff88\044\006\052\036\053\040" +
    "\054\055\055\042\056\037\062\044\063\050\064\175\065" +
    "\uff88\001\002\000\010\013\171\040\172\065\200\001\002" +
    "\000\040\034\143\035\141\065\065\071\066\072\071\073" +
    "\067\074\070\075\064\076\142\077\140\100\137\101\134" +
    "\102\136\103\135\116\133\001\002\000\020\013\uff8b\040" +
    "\uff8b\041\uff8b\065\uff8b\105\uff8b\114\uff8b\115\uff8b\001\002" +
    "\000\004\064\202\001\002\000\006\044\006\064\011\001" +
    "\002\000\004\065\204\001\002\000\020\013\uff90\040\uff90" +
    "\041\uff90\065\uff90\105\uff90\114\uff90\115\uff90\001\002\000" +
    "\004\004\206\001\002\000\006\051\207\105\uffb6\001\002" +
    "\000\046\004\056\005\047\006\046\007\054\013\uff88\026" +
    "\126\035\122\036\045\040\uff88\052\036\053\040\054\055" +
    "\055\042\056\037\062\044\063\050\064\123\105\uff88\001" +
    "\002\000\010\013\171\040\172\105\uffb5\001\002\000\026" +
    "\002\ufffa\010\ufffa\020\ufffa\021\ufffa\023\ufffa\031\ufffa\044" +
    "\ufffa\046\ufffa\064\ufffa\106\ufffa\001\002\000\004\105\ufff4" +
    "\001\002\000\004\002\ufffe\001\002\000\004\004\223\001" +
    "\002\000\004\004\222\001\002\000\004\004\221\001\002" +
    "\000\004\004\220\001\002\000\004\105\uffaf\001\002\000" +
    "\004\105\uffae\001\002\000\004\105\uffac\001\002\000\004" +
    "\037\224\001\002\000\004\004\225\001\002\000\004\105" +
    "\uffad\001\002\000\004\004\227\001\002\000\006\011\230" +
    "\023\231\001\002\000\004\004\233\001\002\000\004\004" +
    "\232\001\002\000\004\105\uffaa\001\002\000\012\057\240" +
    "\060\237\061\235\111\234\001\002\000\004\064\241\001" +
    "\002\000\024\035\uffe7\036\uffe7\042\uffe7\065\uffe7\066\uffe7" +
    "\067\uffe7\105\uffe7\107\uffe7\110\uffe7\001\002\000\004\105" +
    "\uffab\001\002\000\024\035\uffe9\036\uffe9\042\uffe9\065\uffe9" +
    "\066\uffe9\067\uffe9\105\uffe9\107\uffe9\110\uffe9\001\002\000" +
    "\024\035\uffea\036\uffea\042\uffea\065\uffea\066\uffea\067\uffea" +
    "\105\uffea\107\uffea\110\uffea\001\002\000\004\006\242\001" +
    "\002\000\004\065\243\001\002\000\024\035\uffe8\036\uffe8" +
    "\042\uffe8\065\uffe8\066\uffe8\067\uffe8\105\uffe8\107\uffe8\110" +
    "\uffe8\001\002\000\026\002\ufffc\010\ufffc\020\ufffc\021\ufffc" +
    "\023\ufffc\031\ufffc\044\ufffc\046\ufffc\064\ufffc\106\ufffc\001" +
    "\002\000\004\004\246\001\002\000\006\004\251\050\247" +
    "\001\002\000\004\064\263\001\002\000\004\050\253\001" +
    "\002\000\006\004\251\050\uffb8\001\002\000\004\050\uffb7" +
    "\001\002\000\004\064\254\001\002\000\022\005\047\006" +
    "\046\007\054\036\045\044\006\062\044\063\050\064\011" +
    "\001\002\000\004\065\262\001\002\000\020\005\047\006" +
    "\046\007\054\036\045\062\044\063\050\065\uffba\001\002" +
    "\000\004\065\260\001\002\000\004\105\uffbc\001\002\000" +
    "\004\065\uffb9\001\002\000\004\105\uffbb\001\002\000\022" +
    "\005\047\006\046\007\054\036\045\044\006\062\044\063" +
    "\050\064\011\001\002\000\004\065\267\001\002\000\004" +
    "\065\266\001\002\000\004\105\uffbd\001\002\000\004\105" +
    "\uffbe\001\002\000\004\002\001\001\002\000\004\004\333" +
    "\001\002\000\004\004\332\001\002\000\004\004\277\001" +
    "\002\000\004\015\275\001\002\000\006\044\006\064\011" +
    "\001\002\000\004\105\ufff2\001\002\000\004\064\300\001" +
    "\002\000\004\004\304\001\002\000\006\065\ufff1\107\330" +
    "\001\002\000\004\065\327\001\002\000\006\065\uffef\107" +
    "\uffef\001\002\000\012\057\240\060\237\061\235\111\234" +
    "\001\002\000\022\035\307\036\310\042\uffe6\065\uffe6\066" +
    "\uffe6\067\306\107\uffe6\110\uffe6\001\002\000\004\064\324" +
    "\001\002\000\004\036\323\001\002\000\014\042\uffe5\065" +
    "\uffe5\066\uffe5\107\uffe5\110\uffe5\001\002\000\014\042\uffec" +
    "\065\uffec\066\uffec\107\uffec\110\312\001\002\000\016\005" +
    "\047\006\046\007\054\036\045\062\044\063\050\001\002" +
    "\000\012\042\uffe3\065\uffe3\066\314\107\uffe3\001\002\000" +
    "\004\112\321\001\002\000\010\042\316\065\uffe1\107\uffe1" +
    "\001\002\000\004\033\320\001\002\000\006\065\uffee\107" +
    "\uffee\001\002\000\006\065\uffe0\107\uffe0\001\002\000\010" +
    "\042\uffe2\065\uffe2\107\uffe2\001\002\000\012\042\uffeb\065" +
    "\uffeb\066\uffeb\107\uffeb\001\002\000\014\042\uffe4\065\uffe4" +
    "\066\uffe4\107\uffe4\110\uffe4\001\002\000\046\004\056\005" +
    "\047\006\046\007\054\013\uff88\026\126\035\122\036\045" +
    "\040\uff88\052\036\053\040\054\055\055\042\056\037\062" +
    "\044\063\050\064\123\065\uff88\001\002\000\010\013\171" +
    "\040\172\065\326\001\002\000\006\065\uffed\107\uffed\001" +
    "\002\000\004\105\ufff6\001\002\000\004\004\304\001\002" +
    "\000\004\065\ufff0\001\002\000\004\105\ufff5\001\002\000" +
    "\004\037\334\001\002\000\004\004\335\001\002\000\004" +
    "\064\336\001\002\000\004\004\337\001\002\000\004\065" +
    "\340\001\002\000\004\105\ufff3\001\002\000\026\002\ufffd" +
    "\010\ufffd\020\ufffd\021\ufffd\023\ufffd\031\ufffd\044\ufffd\046" +
    "\ufffd\064\ufffd\106\ufffd\001\002\000\026\002\ufff9\010\ufff9" +
    "\020\ufff9\021\ufff9\023\ufff9\031\ufff9\044\ufff9\046\ufff9\064" +
    "\ufff9\106\ufff9\001\002\000\004\065\344\001\002\000\004" +
    "\104\102\001\002\000\026\002\ufff8\010\ufff8\020\ufff8\021" +
    "\ufff8\023\ufff8\031\ufff8\044\ufff8\046\ufff8\064\ufff8\106\ufff8" +
    "\001\002\000\036\004\uffdd\005\uffdd\006\uffdd\007\uffdd\036" +
    "\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\062\uffdd" +
    "\063\uffdd\064\uffdd\072\uffdd\001\002\000\036\004\056\005" +
    "\047\006\046\007\054\036\045\052\036\053\040\054\055" +
    "\055\042\056\037\062\044\063\050\064\053\072\350\001" +
    "\002\000\020\027\uff86\041\uff86\051\uff86\065\uff86\105\uff86" +
    "\114\uff86\115\uff86\001\002\000\040\004\u010e\015\u010c\027" +
    "\uffdc\041\uffdc\051\uffdc\065\uffdc\071\066\072\071\073\067" +
    "\074\070\075\064\105\uffdc\107\uffdc\114\uffdc\115\uffdc\001" +
    "\002\000\020\027\353\041\uffd5\051\uffd5\065\uffd5\105\uffd5" +
    "\114\uffd5\115\uffd5\001\002\000\006\004\u0101\064\u0102\001" +
    "\002\000\016\041\uffd3\051\356\065\uffd3\105\uffd3\114\uffd3" +
    "\115\uffd3\001\002\000\014\041\uffcf\065\uffcf\105\uffcf\114" +
    "\361\115\uffcf\001\002\000\056\004\056\005\047\006\046" +
    "\007\054\013\uff88\026\126\035\122\036\045\040\uff88\041" +
    "\uff88\052\036\053\040\054\055\055\042\056\037\062\044" +
    "\063\050\064\123\065\uff88\105\uff88\114\uff88\115\uff88\001" +
    "\002\000\020\013\171\040\172\041\uffd2\065\uffd2\105\uffd2" +
    "\114\uffd2\115\uffd2\001\002\000\012\041\uffcd\065\uffcd\105" +
    "\uffcd\115\365\001\002\000\004\017\362\001\002\000\004" +
    "\004\056\001\002\000\012\041\uffce\065\uffce\105\uffce\115" +
    "\uffce\001\002\000\010\041\367\065\uffcb\105\uffcb\001\002" +
    "\000\052\004\056\005\047\006\046\007\054\013\uff88\026" +
    "\126\035\122\036\045\040\uff88\041\uff88\052\036\053\040" +
    "\054\055\055\042\056\037\062\044\063\050\064\123\065" +
    "\uff88\105\uff88\001\002\000\014\013\171\040\172\041\uffcc" +
    "\065\uffcc\105\uffcc\001\002\000\004\017\371\001\002\000" +
    "\006\065\uffdf\105\uffdf\001\002\000\004\004\056\001\002" +
    "\000\006\065\uffca\105\uffca\001\002\000\014\004\uffc7\016" +
    "\374\022\375\065\uffc7\105\uffc7\001\002\000\010\004\uffc6" +
    "\065\uffc6\105\uffc6\001\002\000\010\004\uffc5\065\uffc5\105" +
    "\uffc5\001\002\000\010\004\056\065\uffc9\105\uffc9\001\002" +
    "\000\006\065\uffc8\105\uffc8\001\002\000\016\041\uffd4\051" +
    "\uffd4\065\uffd4\105\uffd4\114\uffd4\115\uffd4\001\002\000\022" +
    "\015\u010a\041\uffda\051\uffda\065\uffda\105\uffda\107\uffda\114" +
    "\uffda\115\uffda\001\002\000\006\044\006\064\011\001\002" +
    "\000\020\041\uffd7\051\uffd7\065\uffd7\105\uffd7\107\u0104\114" +
    "\uffd7\115\uffd7\001\002\000\006\004\u0101\064\u0102\001\002" +
    "\000\016\041\uffd6\051\uffd6\065\uffd6\105\uffd6\114\uffd6\115" +
    "\uffd6\001\002\000\004\065\u0107\001\002\000\004\015\u0108" +
    "\001\002\000\004\004\u0109\001\002\000\020\041\uffd8\051" +
    "\uffd8\065\uffd8\105\uffd8\107\uffd8\114\uffd8\115\uffd8\001\002" +
    "\000\004\004\u010b\001\002\000\020\041\uffd9\051\uffd9\065" +
    "\uffd9\105\uffd9\107\uffd9\114\uffd9\115\uffd9\001\002\000\004" +
    "\004\u0113\001\002\000\022\027\uff83\041\uff83\051\uff83\065" +
    "\uff83\105\uff83\107\u0111\114\uff83\115\uff83\001\002\000\022" +
    "\027\uff85\041\uff85\051\uff85\065\uff85\105\uff85\107\u010f\114" +
    "\uff85\115\uff85\001\002\000\036\004\056\005\047\006\046" +
    "\007\054\036\045\052\036\053\040\054\055\055\042\056" +
    "\037\062\044\063\050\064\053\072\350\001\002\000\020" +
    "\027\uff84\041\uff84\051\uff84\065\uff84\105\uff84\114\uff84\115" +
    "\uff84\001\002\000\036\004\056\005\047\006\046\007\054" +
    "\036\045\052\036\053\040\054\055\055\042\056\037\062" +
    "\044\063\050\064\053\072\350\001\002\000\020\027\uff82" +
    "\041\uff82\051\uff82\065\uff82\105\uff82\114\uff82\115\uff82\001" +
    "\002\000\022\027\uffdb\041\uffdb\051\uffdb\065\uffdb\105\uffdb" +
    "\107\uffdb\114\uffdb\115\uffdb\001\002\000\026\002\ufff7\010" +
    "\ufff7\020\ufff7\021\ufff7\023\ufff7\031\ufff7\044\ufff7\046\ufff7" +
    "\064\ufff7\106\ufff7\001\002\000\026\002\ufffb\010\ufffb\020" +
    "\ufffb\021\ufffb\023\ufffb\031\ufffb\044\ufffb\046\ufffb\064\ufffb" +
    "\106\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\026\002\014\003\006\004\021\005\012\006" +
    "\016\007\003\010\023\011\011\012\007\013\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\342" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\212\004" +
    "\021\005\012\006\016\007\003\010\023\011\011\012\007" +
    "\013\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\036\032\037\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\036\032\037\033\001\001\000\002\001\001" +
    "\000\012\030\042\034\050\040\051\041\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\061\030\042\034\050\040\062\041\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\077\030\042" +
    "\034\050\040\062\041\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\030\042\034\050\040\075\041\040" +
    "\001\001\000\002\001\001\000\012\030\042\034\050\040" +
    "\074\041\040\001\001\000\012\030\042\034\050\040\073" +
    "\041\040\001\001\000\012\030\042\034\050\040\072\041" +
    "\040\001\001\000\012\030\042\034\050\040\071\041\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\021\123\030\042\034\050\040\124\041\040\001\001\000" +
    "\002\001\001\000\016\006\061\021\175\030\042\034\050" +
    "\040\176\041\040\001\001\000\002\001\001\000\004\042" +
    "\131\001\001\000\002\001\001\000\004\006\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\030\042\034" +
    "\050\040\161\041\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\021\173\030\042\034\050" +
    "\040\124\041\040\001\001\000\014\021\172\030\042\034" +
    "\050\040\124\041\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\077\021\175\030\042\034\050\040" +
    "\176\041\040\001\001\000\002\001\001\000\004\042\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\021\207\030\042\034" +
    "\050\040\124\041\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\251\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\256\034\255\050\254\001\001\000\002" +
    "\001\001\000\006\034\255\050\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\264\034\255\050\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\275\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\301\015" +
    "\300\016\302\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\304\001\001\000\004\017" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\312\001\001\000\004\034\321\001" +
    "\001\000\004\045\314\001\001\000\002\001\001\000\004" +
    "\020\316\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\021\324\030\042\034\050\040\124\041" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\330\015\300\016\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\023\351\030\042\034\050\040\350" +
    "\041\040\001\001\000\002\001\001\000\004\024\u010c\001" +
    "\001\000\004\025\353\001\001\000\006\026\u0102\046\377" +
    "\001\001\000\004\027\354\001\001\000\004\031\357\001" +
    "\001\000\014\021\356\030\042\034\050\040\124\041\040" +
    "\001\001\000\002\001\001\000\004\032\363\001\001\000" +
    "\002\001\001\000\004\030\362\001\001\000\002\001\001" +
    "\000\004\033\367\001\001\000\014\021\365\030\042\034" +
    "\050\040\124\041\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\372\047\371\001" +
    "\001\000\002\001\001\000\004\051\375\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\372\047\376\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u0105\001\001\000\002\001\001\000\006\026" +
    "\u0102\046\u0104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\023\u010f\030\042\034" +
    "\050\040\350\041\040\001\001\000\002\001\001\000\014" +
    "\023\u0111\030\042\034\050\040\350\041\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  public Exp parseResult;
  Lexer lexer;
  public Exp getParseResult()
  {
	  parseResult=action_obj.start_exp;
	  return parseResult;
  }
  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ArrayList<ErrorMsg.ErrorMsg> errorMsgList=new ArrayList<ErrorMsg.ErrorMsg>();
	ErrorMsg.ErrorMsg errorMsg=new ErrorMsg.ErrorMsg();
  public void report_error(String message, 
			   java_cup.runtime.Symbol info) {
      errorMsgList.add(new ErrorMsg.ErrorMsg(info.left, message));
  }

  public parser(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 public Exp start_exp;

static  Symbol sym(String s) {
	         return Symbol.symbol(s);
	        }
	    
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // select ::= LPAREN select RPAREN UNION LPAREN select RPAREN UNION LPAREN select RPAREN 
            {
              SelectExp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // select ::= LPAREN select RPAREN UNION ALL LPAREN select RPAREN 
            {
              SelectExp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // select ::= LPAREN select RPAREN UNION LPAREN select RPAREN 
            {
              SelectExp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // select_expr ::= value as_or_not COMMA select_expr 
            {
              SelectExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AsOrNot as = (AsOrNot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectExpr s = (SelectExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(v,as,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // select_expr ::= value as_or_not 
            {
              SelectExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AsOrNot as = (AsOrNot)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(v,as,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // select_expr ::= value NAME COMMA select_expr 
            {
              SelectExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectExpr s = (SelectExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(v,new AsOrNot(new Symbol(N)),s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // select_expr ::= value NAME 
            {
              SelectExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(v,new AsOrNot(new Symbol(N)),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // select_expr ::= TIMES 
            {
              SelectExpr RESULT =null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object T = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(new ColValue(new ColName(null, new Symbol("*"))),null,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // bool_expr ::= value NOT LIKE STRING 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		new LikeEscapeExp(v,false,false,S,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // bool_expr ::= 
            {
              BoolExp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // bool_expr ::= value LIKE STRING ESCAPE STRING 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String S = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		new LikeEscapeExp(v,true,true,S,S2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // bool_expr ::= value LIKE STRING 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		new LikeEscapeExp(v,true,false,S,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // bool_expr ::= LPAREN bool_expr RPAREN 
            {
              BoolExp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // bool_expr ::= value cop ALL LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new AllExp(v,c,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // bool_expr ::= value cop ANY LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new AnyExp(v,c,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // bool_expr ::= value NOT IN LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new InExp(false,v,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // bool_expr ::= value IN LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new InExp(true,v,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // bool_expr ::= NOT EXISTS LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new BoolExsitExp(false,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // bool_expr ::= EXISTS LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new BoolExsitExp(true,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // bool_expr ::= bool_expr OR bool_expr 
            {
              BoolExp RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BoolExp b1 = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp b2 = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new BoolOrExp(b1,b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // bool_expr ::= bool_expr AND bool_expr 
            {
              BoolExp RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BoolExp b1 = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp b2 = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new BoolAndExp(b1,b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // bool_expr ::= value cop value 
            {
              BoolExp RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		new CompBoolExp(v1,c,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // cop ::= NEQ 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("NEQ"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cop ::= GE 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("GE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cop ::= LE 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("LE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cop ::= EQ 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("EQ"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cop ::= GT 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("GT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cop ::= LT 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("LT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // value ::= func LPAREN col_name RPAREN 
            {
              Value RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new FuncValue(f,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // value ::= LPAREN select RPAREN 
            {
              Value RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new SubqueryValue(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // value ::= value MOD value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("MOD"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // value ::= value DIVIDE value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("DIVIDE"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // value ::= value TIMES value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("TIMES"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // value ::= value MINUS value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("MINUS"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // value ::= value PLUS value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("PLUS"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // value ::= const_value 
            {
              Value RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValue v = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // value ::= col_name 
            {
              Value RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ColValue(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // value ::= LPAREN value RPAREN 
            {
              Value RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // func ::= SUM 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("SUM");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // func ::= COUNT 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("COUNT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // func ::= MAX 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("MAX");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // func ::= MIN 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("MIN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // func ::= AVG 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("AVG");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // alter ::= ALTER TABLE NAME DROP NAME 
            {
              AlterExp RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AlterDropExp(Aleft,new Symbol(N),new Symbol(N1));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // alter ::= ALTER TABLE NAME ADD NAME data_type 
            {
              AlterExp RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AlterAddExp(Aleft,new Symbol(N),new Symbol(N1),dt);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // drop ::= DROP DATABASE NAME 
            {
              DropExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		new DropDatabaseExp(Dleft,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // drop ::= DROP INDEX NAME ON NAME 
            {
              DropExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		new DropIndexExp(Dleft,new Symbol(N2),new Symbol(N1));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // drop ::= DROP VIEW NAME 
            {
              DropExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		new DropViewExp(Dleft,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // drop ::= DROP TABLE NAME 
            {
              DropExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		new DropTableExp(Dleft,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // update ::= UPDATE NAME SET assignlist 
            {
              UpdateExp RESULT =null;
		int Uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object U = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignList a = (AssignList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new UpdateExp(Uleft,new Symbol(N),a,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("update",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // update ::= UPDATE NAME SET assignlist WHERE bool_expr 
            {
              UpdateExp RESULT =null;
		int Uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object U = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssignList a = (AssignList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new UpdateExp(Uleft,new Symbol(N),a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("update",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // assignlist ::= assignment assignlist 
            {
              AssignList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignList al = (AssignList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AssignList(a,al);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignlist",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assignlist ::= assignment 
            {
              AssignList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AssignList(a,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignlist",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assignment ::= NAME EQ value 
            {
              Assignment RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Assignment(Nleft,new Symbol(N),v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // delete ::= DELETE FROM NAME WHERE bool_expr 
            {
              DeleteExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT=new DeleteExp(Dleft,new Symbol(N),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delete",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // delete ::= DELETE FROM NAME 
            {
              DeleteExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DeleteExp(Dleft,new Symbol(N),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delete",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // namelist ::= NAME namelist 
            {
              NameList RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameList(Nleft,new Symbol(N),nl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // namelist ::= NAME 
            {
              NameList RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameList(Nleft,new Symbol(N),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // const_value_list ::= const_value const_value_list 
            {
              ConstValueList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ConstValue c = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValueList cl = (ConstValueList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueList(c,cl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // const_value_list ::= const_value 
            {
              ConstValueList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValue c = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueList(c,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // insert ::= INSERT INTO NAME namelist VALUES LPAREN const_value_list RPAREN 
            {
              InsertExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ConstValueList cl = (ConstValueList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new InsertExp(ileft,new Symbol(N),nl,cl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // insert ::= INSERT INTO NAME namelist VALUES LPAREN select RPAREN 
            {
              InsertExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new InsertExp(ileft,new Symbol(N),nl,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // insert ::= INSERT INTO NAME VALUES LPAREN select RPAREN 
            {
              InsertExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new InsertExp(ileft,new Symbol(N),s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // insert ::= INSERT INTO NAME VALUES LPAREN const_value_list RPAREN 
            {
              InsertExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ConstValueList cl = (ConstValueList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new InsertExp(ileft,new Symbol(N),cl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // const_value ::= NULL 
            {
              ConstValue RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueNull();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // const_value ::= FLOATVALUE 
            {
              ConstValue RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueFloat(fleft,f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // const_value ::= FALSE 
            {
              ConstValue RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueBoolean(tleft,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // const_value ::= TRUE 
            {
              ConstValue RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueBoolean(tleft,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // const_value ::= STRING 
            {
              ConstValue RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueString(sleft,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // const_value ::= INTVALUE 
            {
              ConstValue RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueInt(ileft,i.intValue());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asc_or_desc ::= DESC 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("DESC");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asc_or_desc",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asc_or_desc ::= ASC 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("ASC");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asc_or_desc",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asc_or_desc ::= 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("ASC");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asc_or_desc",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // order_list ::= col_name asc_or_desc order_list 
            {
              OrderList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ColName n = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OrderList o = (OrderList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OrderList(n,a,o);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // order_list ::= col_name asc_or_desc 
            {
              OrderList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ColName n = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OrderList(n,a,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // order_clause ::= ORDER BY order_list 
            {
              OrderClause RESULT =null;
		int olleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int olright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OrderList ol = (OrderList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrderClause(ol); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_clause",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // order_clause ::= 
            {
              OrderClause RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_clause",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // having_clause ::= HAVING bool_expr 
            {
              HavingClause RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp be = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new HavingClause(be); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("having_clause",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // having_clause ::= 
            {
              HavingClause RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("having_clause",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // group_clause ::= GROUP BY col_name 
            {
              GroupClause RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new GroupClause(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_clause",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // group_clause ::= 
            {
              GroupClause RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_clause",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // col_name ::= NAME DOT NAME 
            {
              ColName RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ColName(new Symbol(N1),new Symbol(N2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col_name",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // col_name ::= NAME 
            {
              ColName RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ColName(null,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col_name",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // where_clause ::= WHERE bool_expr 
            {
              WhereClause RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new WhereClause(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("where_clause",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // where_clause ::= 
            {
              WhereClause RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("where_clause",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // from_clause ::= FROM table_ref_list 
            {
              FromClause RESULT =null;
		int trlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableRefList trl = (TableRefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new FromClause(trl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("from_clause",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // from_clause ::= 
            {
              FromClause RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("from_clause",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // table_ref_list ::= table_ref COMMA table_ref_list 
            {
              TableRefList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TableRef t = (TableRef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int trlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableRefList trl = (TableRefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRefList(t,trl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // table_ref_list ::= table_ref 
            {
              TableRefList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableRef t = (TableRef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRefList(t,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // table_ref ::= LPAREN select RPAREN AS NAME 
            {
              TableRef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRef(null,new Symbol(N),s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // table_ref ::= NAME AS NAME 
            {
              TableRef RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRef(new Symbol(N1),new Symbol(N2),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // table_ref ::= NAME 
            {
              TableRef RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRef(new Symbol(N),null,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // as_or_not ::= AS NAME 
            {
              AsOrNot RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsOrNot(new Symbol(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("as_or_not",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // as_or_not ::= 
            {
              AsOrNot RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("as_or_not",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // distinct_or_not ::= DISTINCT 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("DISTINCT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("distinct_or_not",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // distinct_or_not ::= 
            {
              Symbol RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("distinct_or_not",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // select ::= SELECT distinct_or_not select_expr from_clause where_clause group_clause having_clause order_clause 
            {
              SelectExp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		SelectExpr s = (SelectExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		FromClause f = (FromClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WhereClause w = (WhereClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GroupClause g = (GroupClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HavingClause h = (HavingClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OrderClause o = (OrderClause)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SelectExp(d, s, f, w, g, h, o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // primary_key ::= PRIMARY KEY 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("PRIMARYKEY");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_key",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // primary_key ::= 
            {
              Symbol RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_key",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // auto_increasement ::= AUTO INCREMENT 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("AUTOINCREMENT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auto_increasement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // auto_increasement ::= 
            {
              Symbol RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auto_increasement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // null_or_not ::= NOT NULL 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("NOTNULL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("null_or_not",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // null_or_not ::= NULL 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("NULL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("null_or_not",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // null_or_not ::= 
            {
              Symbol RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("null_or_not",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // data_type ::= BOOLEAN 
            {
              DataType RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameTy( new Symbol("boolean"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // data_type ::= CHAR LPAREN INTVALUE RPAREN 
            {
              DataType RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object L = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer I = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ArrayTy( new Symbol("char"),(Integer)I);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // data_type ::= FLOAT 
            {
              DataType RESULT =null;
		int Fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameTy( new Symbol("float"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // data_type ::= INT 
            {
              DataType RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameTy( new Symbol("int"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // default_value ::= DEFAULT const_value 
            {
              ConstValue RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValue cv = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_value",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // default_value ::= 
            {
              ConstValue RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_value",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // column_definition ::= NAME data_type CHECK LPAREN bool_expr RPAREN 
            {
              ColumnDefinition RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dtyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dtyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DataType dty = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ColumnDefinition(ileft, new Symbol(i), dty, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_definition",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // column_definition ::= NAME data_type null_or_not default_value auto_increasement primary_key 
            {
              ColumnDefinition RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Symbol non = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstValue dv = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol ai = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pkright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol pk = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ColumnDefinition(Nleft,new Symbol(N),dt,pk,non,ai,dv); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_definition",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // create_element ::= column_definition 
            {
              CreateElement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColumnDefinition c = (ColumnDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_element",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // create_element_list ::= create_element COMMA create_element_list 
            {
              CreateElementList RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CreateElement c1 = (CreateElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CreateElementList c = (CreateElementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateElementList( c1,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_element_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // create_element_list ::= create_element 
            {
              CreateElementList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CreateElement c = (CreateElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateElementList( c,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_element_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // create ::= CREATE NAME AS select 
            {
              CreateExp RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateViewExp(Cleft,new Symbol(N),s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // create ::= CREATE INDEX NAME ON NAME LPAREN NAME RPAREN 
            {
              CreateExp RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object O = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String N2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object L = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String N3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateIndexExp(Cleft,new Symbol(N1),new Symbol(N2),new Symbol(N3),false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // create ::= USE NAME 
            {
              CreateExp RESULT =null;
		int Uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object U = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateDatabaseExp(Uleft,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // create ::= CREATE DATABASE NAME 
            {
              CreateExp RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateDatabaseExp(Cleft,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // create ::= CREATE TABLE NAME LPAREN create_element_list RPAREN 
            {
              CreateExp RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object T = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int LPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int LPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object LP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CreateElementList c = (CreateElementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int RPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int RPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object RP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateTableExp(Cleft,new Symbol(N),c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sql ::= alter SEMICOLON 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AlterExp a = (AlterExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sql ::= drop SEMICOLON 
            {
              Exp RESULT =null;
		int drleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DropExp dr = (DropExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=dr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sql ::= update SEMICOLON 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UpdateExp u = (UpdateExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=u;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sql ::= delete SEMICOLON 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeleteExp d = (DeleteExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=d;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sql ::= insert SEMICOLON 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InsertExp i = (InsertExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sql ::= select SEMICOLON 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sql ::= create SEMICOLON 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CreateExp c = (CreateExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sql_list ::= sql sql_list 
            {
              SQLList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SQLList l = (SQLList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SQLList(s,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sql_list ::= sql 
            {
              SQLList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SQLList(s,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // database ::= sql_list 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SQLList s = (SQLList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("database",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= database EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
		start_exp=start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

