
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jul 16 11:16:04 IRKST 2011
//----------------------------------------------------

package Parse;

import Absyn.*;

import java.util.ArrayList;
import Symbol.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jul 16 11:16:04 IRKST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\003\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\004\011\000\002\004\006\000\002\004\005\000\002" +
    "\004\012\000\002\004\006\000\002\013\003\000\002\013" +
    "\005\000\002\014\003\000\002\015\010\000\002\015\010" +
    "\000\002\042\002\000\002\042\004\000\002\043\003\000" +
    "\002\043\003\000\002\043\006\000\002\043\003\000\002" +
    "\016\002\000\002\016\003\000\002\016\004\000\002\044" +
    "\002\000\002\044\004\000\002\017\002\000\002\017\004" +
    "\000\002\005\012\000\002\021\002\000\002\021\003\000" +
    "\002\023\002\000\002\023\004\000\002\025\003\000\002" +
    "\025\005\000\002\025\007\000\002\045\003\000\002\045" +
    "\005\000\002\024\002\000\002\024\004\000\002\026\002" +
    "\000\002\026\004\000\002\027\003\000\002\027\005\000" +
    "\002\030\002\000\002\030\005\000\002\031\002\000\002" +
    "\031\004\000\002\032\002\000\002\032\005\000\002\046" +
    "\004\000\002\046\005\000\002\050\002\000\002\050\003" +
    "\000\002\050\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\006\012\000\002\006\012\000\002\006" +
    "\013\000\002\006\013\000\002\047\003\000\002\047\004" +
    "\000\002\034\003\000\002\034\004\000\002\007\006\000" +
    "\002\007\010\000\002\035\005\000\002\036\003\000\002" +
    "\036\004\000\002\010\011\000\002\010\007\000\002\011" +
    "\006\000\002\011\006\000\002\011\010\000\002\011\006" +
    "\000\002\012\010\000\002\012\007\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\037\005\000\002\037\003\000\002\037" +
    "\003\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\006\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\006\000\002\020\007\000\002\020\007\000" +
    "\002\020\010\000\002\020\010\000\002\020\010\000\002" +
    "\020\005\000\002\020\005\000\002\020\007\000\002\020" +
    "\002\000\002\020\006\000\002\022\003\000\002\022\004" +
    "\000\002\022\006\000\002\022\004\000\002\022\006\000" +
    "\002\005\011\000\002\005\012\000\002\005\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\024\010\017\020\013\021\024\023\020\031" +
    "\015\044\006\046\025\064\010\106\022\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\ufff9\001\002\000\040\004" +
    "\uffe0\005\uffe0\006\uffe0\007\uffe0\036\uffe0\052\uffe0\053\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\062\uffe0\063\uffe0\064\uffe0\072" +
    "\uffe0\113\356\001\002\000\004\002\ufffa\001\002\000\006" +
    "\044\006\064\010\001\002\000\004\002\ufffb\001\002\000" +
    "\004\002\uffff\001\002\000\012\004\305\024\303\030\302" +
    "\045\304\001\002\000\004\002\301\001\002\000\004\032" +
    "\252\001\002\000\004\002\ufffe\001\002\000\004\045\234" +
    "\001\002\000\012\024\217\030\216\045\220\047\221\001" +
    "\002\000\004\002\000\001\002\000\004\004\214\001\002" +
    "\000\004\002\ufffc\001\002\000\004\027\206\001\002\000" +
    "\004\004\026\001\002\000\004\043\027\001\002\000\004" +
    "\004\031\001\002\000\006\051\121\105\120\001\002\000" +
    "\004\102\034\001\002\000\010\004\031\051\uffb5\105\uffb5" +
    "\001\002\000\006\051\uffb4\105\uffb4\001\002\000\034\004" +
    "\055\005\046\006\045\007\052\036\044\052\035\053\037" +
    "\054\054\055\041\056\036\062\042\063\047\064\053\001" +
    "\002\000\004\064\uffab\001\002\000\004\064\uffa7\001\002" +
    "\000\004\064\uffa8\001\002\000\004\064\115\001\002\000" +
    "\004\064\uffa9\001\002\000\110\002\uffc4\004\uffc4\005\uffc4" +
    "\006\uffc4\007\uffc4\013\uffc4\015\uffc4\027\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\040\uffc4\041\uffc4\042\uffc4\051\uffc4\062\uffc4" +
    "\063\uffc4\065\uffc4\066\uffc4\071\uffc4\072\uffc4\073\uffc4\074" +
    "\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4" +
    "\103\uffc4\105\uffc4\107\uffc4\114\uffc4\115\uffc4\116\uffc4\001" +
    "\002\000\070\002\uffa5\004\uffa5\013\uffa5\015\uffa5\027\uffa5" +
    "\034\uffa5\035\uffa5\040\uffa5\041\uffa5\051\uffa5\065\uffa5\071" +
    "\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5" +
    "\100\uffa5\101\uffa5\102\uffa5\103\uffa5\105\uffa5\107\uffa5\114" +
    "\uffa5\115\uffa5\116\uffa5\001\002\000\110\002\uffc1\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\013\uffc1\015\uffc1\027\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\040\uffc1\041\uffc1\042\uffc1\051\uffc1" +
    "\062\uffc1\063\uffc1\065\uffc1\066\uffc1\071\uffc1\072\uffc1\073" +
    "\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1" +
    "\102\uffc1\103\uffc1\105\uffc1\107\uffc1\114\uffc1\115\uffc1\116" +
    "\uffc1\001\002\000\110\002\uffc6\004\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\013\uffc6\015\uffc6\027\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\051\uffc6\062\uffc6\063\uffc6" +
    "\065\uffc6\066\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075" +
    "\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6" +
    "\105\uffc6\107\uffc6\114\uffc6\115\uffc6\116\uffc6\001\002\000" +
    "\110\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\013\uffc5" +
    "\015\uffc5\027\uffc5\034\uffc5\035\uffc5\036\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\051\uffc5\062\uffc5\063\uffc5\065\uffc5\066\uffc5" +
    "\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077" +
    "\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\105\uffc5\107\uffc5" +
    "\114\uffc5\115\uffc5\116\uffc5\001\002\000\110\002\uffc3\004" +
    "\uffc3\005\uffc3\006\uffc3\007\uffc3\013\uffc3\015\uffc3\027\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\040\uffc3\041\uffc3\042\uffc3\051" +
    "\uffc3\062\uffc3\063\uffc3\065\uffc3\066\uffc3\071\uffc3\072\uffc3" +
    "\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101" +
    "\uffc3\102\uffc3\103\uffc3\105\uffc3\107\uffc3\114\uffc3\115\uffc3" +
    "\116\uffc3\001\002\000\070\002\uffa4\004\uffa4\013\uffa4\015" +
    "\uffa4\027\uffa4\034\uffa4\035\uffa4\040\uffa4\041\uffa4\051\uffa4" +
    "\065\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076" +
    "\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\105\uffa4" +
    "\107\uffa4\114\uffa4\115\uffa4\116\uffa4\001\002\000\022\004" +
    "\uffb6\051\uffb6\071\065\072\070\073\066\074\067\075\063" +
    "\105\uffb6\001\002\000\110\002\uffc2\004\uffc2\005\uffc2\006" +
    "\uffc2\007\uffc2\013\uffc2\015\uffc2\027\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\040\uffc2\041\uffc2\042\uffc2\051\uffc2\062\uffc2\063" +
    "\uffc2\065\uffc2\066\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2" +
    "\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103" +
    "\uffc2\105\uffc2\107\uffc2\114\uffc2\115\uffc2\116\uffc2\001\002" +
    "\000\036\004\055\005\046\006\045\007\052\036\044\044" +
    "\006\052\035\053\037\054\054\055\041\056\036\062\042" +
    "\063\047\064\060\001\002\000\004\064\uffaa\001\002\000" +
    "\076\002\uffd3\004\uffd3\013\uffd3\015\uffd3\016\uffd3\022\uffd3" +
    "\027\uffd3\034\uffd3\035\uffd3\040\uffd3\041\uffd3\051\uffd3\065" +
    "\uffd3\070\056\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3" +
    "\076\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3\105" +
    "\uffd3\107\uffd3\114\uffd3\115\uffd3\116\uffd3\001\002\000\004" +
    "\004\057\001\002\000\074\002\uffd2\004\uffd2\013\uffd2\015" +
    "\uffd2\016\uffd2\022\uffd2\027\uffd2\034\uffd2\035\uffd2\040\uffd2" +
    "\041\uffd2\051\uffd2\065\uffd2\071\uffd2\072\uffd2\073\uffd2\074" +
    "\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2" +
    "\103\uffd2\105\uffd2\107\uffd2\114\uffd2\115\uffd2\116\uffd2\001" +
    "\002\000\036\004\055\005\046\006\045\007\052\036\044" +
    "\044\006\052\035\053\037\054\054\055\041\056\036\062" +
    "\042\063\047\064\060\001\002\000\004\065\076\001\002" +
    "\000\016\065\064\071\065\072\070\073\066\074\067\075" +
    "\063\001\002\000\034\004\055\005\046\006\045\007\052" +
    "\036\044\052\035\053\037\054\054\055\041\056\036\062" +
    "\042\063\047\064\053\001\002\000\070\002\uffa6\004\uffa6" +
    "\013\uffa6\015\uffa6\027\uffa6\034\uffa6\035\uffa6\040\uffa6\041" +
    "\uffa6\051\uffa6\065\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6" +
    "\075\uffa6\076\uffa6\077\uffa6\100\uffa6\101\uffa6\102\uffa6\103" +
    "\uffa6\105\uffa6\107\uffa6\114\uffa6\115\uffa6\116\uffa6\001\002" +
    "\000\034\004\055\005\046\006\045\007\052\036\044\052" +
    "\035\053\037\054\054\055\041\056\036\062\042\063\047" +
    "\064\053\001\002\000\034\004\055\005\046\006\045\007" +
    "\052\036\044\052\035\053\037\054\054\055\041\056\036" +
    "\062\042\063\047\064\053\001\002\000\034\004\055\005" +
    "\046\006\045\007\052\036\044\052\035\053\037\054\054" +
    "\055\041\056\036\062\042\063\047\064\053\001\002\000" +
    "\034\004\055\005\046\006\045\007\052\036\044\052\035" +
    "\053\037\054\054\055\041\056\036\062\042\063\047\064" +
    "\053\001\002\000\070\002\uffa1\004\uffa1\013\uffa1\015\uffa1" +
    "\027\uffa1\034\uffa1\035\uffa1\040\uffa1\041\uffa1\051\uffa1\065" +
    "\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1" +
    "\077\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1\105\uffa1\107" +
    "\uffa1\114\uffa1\115\uffa1\116\uffa1\001\002\000\070\002\uffa0" +
    "\004\uffa0\013\uffa0\015\uffa0\027\uffa0\034\uffa0\035\uffa0\040" +
    "\uffa0\041\uffa0\051\uffa0\065\uffa0\071\uffa0\072\uffa0\073\uffa0" +
    "\074\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0\102" +
    "\uffa0\103\uffa0\105\uffa0\107\uffa0\114\uffa0\115\uffa0\116\uffa0" +
    "\001\002\000\070\002\uffa2\004\uffa2\013\uffa2\015\uffa2\027" +
    "\uffa2\034\uffa2\035\uffa2\040\uffa2\041\uffa2\051\uffa2\065\uffa2" +
    "\071\uffa2\072\070\073\uffa2\074\067\075\063\076\uffa2\077" +
    "\uffa2\100\uffa2\101\uffa2\102\uffa2\103\uffa2\105\uffa2\107\uffa2" +
    "\114\uffa2\115\uffa2\116\uffa2\001\002\000\070\002\uffa3\004" +
    "\uffa3\013\uffa3\015\uffa3\027\uffa3\034\uffa3\035\uffa3\040\uffa3" +
    "\041\uffa3\051\uffa3\065\uffa3\071\uffa3\072\070\073\uffa3\074" +
    "\067\075\063\076\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3" +
    "\103\uffa3\105\uffa3\107\uffa3\114\uffa3\115\uffa3\116\uffa3\001" +
    "\002\000\070\002\uff9f\004\uff9f\013\uff9f\015\uff9f\027\uff9f" +
    "\034\uff9f\035\uff9f\040\uff9f\041\uff9f\051\uff9f\065\uff9f\071" +
    "\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f" +
    "\100\uff9f\101\uff9f\102\uff9f\103\uff9f\105\uff9f\107\uff9f\114" +
    "\uff9f\115\uff9f\116\uff9f\001\002\000\070\002\uff9e\004\uff9e" +
    "\013\uff9e\015\uff9e\027\uff9e\034\uff9e\035\uff9e\040\uff9e\041" +
    "\uff9e\051\uff9e\065\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e" +
    "\075\uff9e\076\uff9e\077\uff9e\100\uff9e\101\uff9e\102\uff9e\103" +
    "\uff9e\105\uff9e\107\uff9e\114\uff9e\115\uff9e\116\uff9e\001\002" +
    "\000\004\065\100\001\002\000\042\034\uff9e\035\uff9e\065" +
    "\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e" +
    "\077\uff9e\100\uff9e\101\uff9e\102\uff9e\103\uff9e\104\101\116" +
    "\uff9e\001\002\000\006\012\102\064\103\001\002\000\004" +
    "\064\112\001\002\000\006\044\006\064\010\001\002\000" +
    "\004\065\105\001\002\000\010\002\uff83\065\uff83\104\106" +
    "\001\002\000\004\064\107\001\002\000\006\044\006\064" +
    "\010\001\002\000\004\065\111\001\002\000\006\002\uff81" +
    "\065\uff81\001\002\000\006\044\006\064\010\001\002\000" +
    "\004\065\114\001\002\000\006\002\uff82\065\uff82\001\002" +
    "\000\004\004\055\001\002\000\004\065\117\001\002\000" +
    "\070\002\uff9d\004\uff9d\013\uff9d\015\uff9d\027\uff9d\034\uff9d" +
    "\035\uff9d\040\uff9d\041\uff9d\051\uff9d\065\uff9d\071\uff9d\072" +
    "\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d\100\uff9d" +
    "\101\uff9d\102\uff9d\103\uff9d\105\uff9d\107\uff9d\114\uff9d\115" +
    "\uff9d\116\uff9d\001\002\000\004\002\uffb2\001\002\000\046" +
    "\004\055\005\046\006\045\007\052\013\uff8a\026\126\035" +
    "\122\036\044\040\uff8a\052\035\053\037\054\054\055\041" +
    "\056\036\062\042\063\047\064\123\105\uff8a\001\002\000" +
    "\004\026\202\001\002\000\050\004\055\005\046\006\045" +
    "\007\052\013\uff8a\026\126\035\122\036\044\040\uff8a\044" +
    "\006\052\035\053\037\054\054\055\041\056\036\062\042" +
    "\063\047\064\176\065\uff8a\001\002\000\010\013\172\040" +
    "\173\105\171\001\002\000\036\034\143\035\141\071\065" +
    "\072\070\073\066\074\067\075\063\076\142\077\140\100" +
    "\137\101\134\102\136\103\135\116\133\001\002\000\004" +
    "\064\127\001\002\000\006\044\006\064\010\001\002\000" +
    "\004\065\131\001\002\000\022\002\uff93\013\uff93\040\uff93" +
    "\041\uff93\065\uff93\105\uff93\114\uff93\115\uff93\001\002\000" +
    "\040\004\055\005\046\006\045\007\052\012\160\014\161" +
    "\036\044\052\035\053\037\054\054\055\041\056\036\062" +
    "\042\063\047\064\053\001\002\000\004\064\155\001\002" +
    "\000\040\004\uff98\005\uff98\006\uff98\007\uff98\012\uff98\014" +
    "\uff98\036\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98" +
    "\062\uff98\063\uff98\064\uff98\001\002\000\040\004\uff97\005" +
    "\uff97\006\uff97\007\uff97\012\uff97\014\uff97\036\uff97\052\uff97" +
    "\053\uff97\054\uff97\055\uff97\056\uff97\062\uff97\063\uff97\064" +
    "\uff97\001\002\000\040\004\uff9a\005\uff9a\006\uff9a\007\uff9a" +
    "\012\uff9a\014\uff9a\036\uff9a\052\uff9a\053\uff9a\054\uff9a\055" +
    "\uff9a\056\uff9a\062\uff9a\063\uff9a\064\uff9a\001\002\000\040" +
    "\004\uff99\005\uff99\006\uff99\007\uff99\012\uff99\014\uff99\036" +
    "\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\062\uff99" +
    "\063\uff99\064\uff99\001\002\000\040\004\uff9b\005\uff9b\006" +
    "\uff9b\007\uff9b\012\uff9b\014\uff9b\036\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\055\uff9b\056\uff9b\062\uff9b\063\uff9b\064\uff9b\001" +
    "\002\000\006\034\147\116\150\001\002\000\040\004\uff9c" +
    "\005\uff9c\006\uff9c\007\uff9c\012\uff9c\014\uff9c\036\uff9c\052" +
    "\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\062\uff9c\063\uff9c" +
    "\064\uff9c\001\002\000\004\005\144\001\002\000\024\002" +
    "\uff8c\013\uff8c\025\145\040\uff8c\041\uff8c\065\uff8c\105\uff8c" +
    "\114\uff8c\115\uff8c\001\002\000\004\005\146\001\002\000" +
    "\022\002\uff8b\013\uff8b\040\uff8b\041\uff8b\065\uff8b\105\uff8b" +
    "\114\uff8b\115\uff8b\001\002\000\004\005\154\001\002\000" +
    "\004\064\151\001\002\000\006\044\006\064\010\001\002" +
    "\000\004\065\153\001\002\000\022\002\uff90\013\uff90\040" +
    "\uff90\041\uff90\065\uff90\105\uff90\114\uff90\115\uff90\001\002" +
    "\000\022\002\uff89\013\uff89\040\uff89\041\uff89\065\uff89\105" +
    "\uff89\114\uff89\115\uff89\001\002\000\006\044\006\064\010" +
    "\001\002\000\004\065\157\001\002\000\022\002\uff91\013" +
    "\uff91\040\uff91\041\uff91\065\uff91\105\uff91\114\uff91\115\uff91" +
    "\001\002\000\004\064\166\001\002\000\004\064\163\001" +
    "\002\000\034\002\uff96\013\uff96\040\uff96\041\uff96\065\uff96" +
    "\071\065\072\070\073\066\074\067\075\063\105\uff96\114" +
    "\uff96\115\uff96\001\002\000\006\044\006\064\010\001\002" +
    "\000\004\065\165\001\002\000\022\002\uff8f\013\uff8f\040" +
    "\uff8f\041\uff8f\065\uff8f\105\uff8f\114\uff8f\115\uff8f\001\002" +
    "\000\006\044\006\064\010\001\002\000\004\065\170\001" +
    "\002\000\022\002\uff8e\013\uff8e\040\uff8e\041\uff8e\065\uff8e" +
    "\105\uff8e\114\uff8e\115\uff8e\001\002\000\004\002\uffb3\001" +
    "\002\000\060\002\uff8a\004\055\005\046\006\045\007\052" +
    "\013\uff8a\026\126\035\122\036\044\040\uff8a\041\uff8a\052" +
    "\035\053\037\054\054\055\041\056\036\062\042\063\047" +
    "\064\123\065\uff8a\105\uff8a\114\uff8a\115\uff8a\001\002\000" +
    "\060\002\uff8a\004\055\005\046\006\045\007\052\013\uff8a" +
    "\026\126\035\122\036\044\040\uff8a\041\uff8a\052\035\053" +
    "\037\054\054\055\041\056\036\062\042\063\047\064\123" +
    "\065\uff8a\105\uff8a\114\uff8a\115\uff8a\001\002\000\022\002" +
    "\uff94\013\172\040\uff94\041\uff94\065\uff94\105\uff94\114\uff94" +
    "\115\uff94\001\002\000\022\002\uff95\013\uff95\040\uff95\041" +
    "\uff95\065\uff95\105\uff95\114\uff95\115\uff95\001\002\000\050" +
    "\004\055\005\046\006\045\007\052\013\uff8a\026\126\035" +
    "\122\036\044\040\uff8a\044\006\052\035\053\037\054\054" +
    "\055\041\056\036\062\042\063\047\064\176\065\uff8a\001" +
    "\002\000\010\013\172\040\173\065\201\001\002\000\040" +
    "\034\143\035\141\065\064\071\065\072\070\073\066\074" +
    "\067\075\063\076\142\077\140\100\137\101\134\102\136" +
    "\103\135\116\133\001\002\000\022\002\uff8d\013\uff8d\040" +
    "\uff8d\041\uff8d\065\uff8d\105\uff8d\114\uff8d\115\uff8d\001\002" +
    "\000\004\064\203\001\002\000\006\044\006\064\010\001" +
    "\002\000\004\065\205\001\002\000\022\002\uff92\013\uff92" +
    "\040\uff92\041\uff92\065\uff92\105\uff92\114\uff92\115\uff92\001" +
    "\002\000\004\004\207\001\002\000\006\051\211\105\210" +
    "\001\002\000\004\002\uffb8\001\002\000\046\004\055\005" +
    "\046\006\045\007\052\013\uff8a\026\126\035\122\036\044" +
    "\040\uff8a\052\035\053\037\054\054\055\041\056\036\062" +
    "\042\063\047\064\123\105\uff8a\001\002\000\010\013\172" +
    "\040\173\105\213\001\002\000\004\002\uffb7\001\002\000" +
    "\004\105\215\001\002\000\004\002\ufff6\001\002\000\004" +
    "\004\230\001\002\000\004\004\226\001\002\000\004\004" +
    "\224\001\002\000\004\004\222\001\002\000\004\105\223" +
    "\001\002\000\004\002\uffb0\001\002\000\004\105\225\001" +
    "\002\000\004\002\uffb1\001\002\000\004\105\227\001\002" +
    "\000\004\002\uffae\001\002\000\004\037\231\001\002\000" +
    "\004\004\232\001\002\000\004\105\233\001\002\000\004" +
    "\002\uffaf\001\002\000\004\004\235\001\002\000\006\011" +
    "\236\023\237\001\002\000\004\004\241\001\002\000\004" +
    "\004\240\001\002\000\004\002\uffac\001\002\000\012\057" +
    "\246\060\243\061\245\111\244\001\002\000\004\002\uffad" +
    "\001\002\000\024\002\uffeb\035\uffeb\036\uffeb\042\uffeb\065" +
    "\uffeb\066\uffeb\067\uffeb\107\uffeb\110\uffeb\001\002\000\004" +
    "\064\247\001\002\000\024\002\uffe9\035\uffe9\036\uffe9\042" +
    "\uffe9\065\uffe9\066\uffe9\067\uffe9\107\uffe9\110\uffe9\001\002" +
    "\000\024\002\uffec\035\uffec\036\uffec\042\uffec\065\uffec\066" +
    "\uffec\067\uffec\107\uffec\110\uffec\001\002\000\004\006\250" +
    "\001\002\000\004\065\251\001\002\000\024\002\uffea\035" +
    "\uffea\036\uffea\042\uffea\065\uffea\066\uffea\067\uffea\107\uffea" +
    "\110\uffea\001\002\000\004\004\253\001\002\000\006\004" +
    "\256\050\255\001\002\000\004\050\271\001\002\000\004" +
    "\064\260\001\002\000\006\004\256\050\uffba\001\002\000" +
    "\004\050\uffb9\001\002\000\022\005\046\006\045\007\052" +
    "\036\044\044\006\062\042\063\047\064\010\001\002\000" +
    "\004\065\267\001\002\000\020\005\046\006\045\007\052" +
    "\036\044\062\042\063\047\065\uffbc\001\002\000\004\065" +
    "\264\001\002\000\004\105\265\001\002\000\004\002\uffbf" +
    "\001\002\000\004\065\uffbb\001\002\000\004\105\270\001" +
    "\002\000\004\002\uffc0\001\002\000\004\064\272\001\002" +
    "\000\022\005\046\006\045\007\052\036\044\044\006\062" +
    "\042\063\047\064\010\001\002\000\004\065\277\001\002" +
    "\000\004\065\275\001\002\000\004\105\276\001\002\000" +
    "\004\002\uffbe\001\002\000\004\105\300\001\002\000\004" +
    "\002\uffbd\001\002\000\004\002\001\001\002\000\004\004" +
    "\346\001\002\000\004\004\344\001\002\000\004\004\310" +
    "\001\002\000\004\015\306\001\002\000\006\044\006\064" +
    "\010\001\002\000\004\002\ufff4\001\002\000\004\064\311" +
    "\001\002\000\004\004\315\001\002\000\006\065\ufff3\107" +
    "\342\001\002\000\004\065\340\001\002\000\006\065\ufff1" +
    "\107\ufff1\001\002\000\012\057\246\060\243\061\245\111" +
    "\244\001\002\000\022\035\320\036\321\042\uffe8\065\uffe8" +
    "\066\uffe8\067\317\107\uffe8\110\uffe8\001\002\000\004\064" +
    "\335\001\002\000\004\036\334\001\002\000\014\042\uffe7" +
    "\065\uffe7\066\uffe7\107\uffe7\110\uffe7\001\002\000\014\042" +
    "\uffee\065\uffee\066\uffee\107\uffee\110\323\001\002\000\016" +
    "\005\046\006\045\007\052\036\044\062\042\063\047\001" +
    "\002\000\012\042\uffe5\065\uffe5\066\325\107\uffe5\001\002" +
    "\000\004\112\332\001\002\000\010\042\327\065\uffe3\107" +
    "\uffe3\001\002\000\004\033\331\001\002\000\006\065\ufff0" +
    "\107\ufff0\001\002\000\006\065\uffe2\107\uffe2\001\002\000" +
    "\010\042\uffe4\065\uffe4\107\uffe4\001\002\000\012\042\uffed" +
    "\065\uffed\066\uffed\107\uffed\001\002\000\014\042\uffe6\065" +
    "\uffe6\066\uffe6\107\uffe6\110\uffe6\001\002\000\046\004\055" +
    "\005\046\006\045\007\052\013\uff8a\026\126\035\122\036" +
    "\044\040\uff8a\052\035\053\037\054\054\055\041\056\036" +
    "\062\042\063\047\064\123\065\uff8a\001\002\000\010\013" +
    "\172\040\173\065\337\001\002\000\006\065\uffef\107\uffef" +
    "\001\002\000\004\105\341\001\002\000\004\002\ufff8\001" +
    "\002\000\004\004\315\001\002\000\004\065\ufff2\001\002" +
    "\000\004\105\345\001\002\000\004\002\ufff7\001\002\000" +
    "\004\037\347\001\002\000\004\004\350\001\002\000\004" +
    "\064\351\001\002\000\004\004\352\001\002\000\004\065" +
    "\353\001\002\000\004\002\ufff5\001\002\000\004\065\355" +
    "\001\002\000\004\104\101\001\002\000\036\004\uffdf\005" +
    "\uffdf\006\uffdf\007\uffdf\036\uffdf\052\uffdf\053\uffdf\054\uffdf" +
    "\055\uffdf\056\uffdf\062\uffdf\063\uffdf\064\uffdf\072\uffdf\001" +
    "\002\000\036\004\055\005\046\006\045\007\052\036\044" +
    "\052\035\053\037\054\054\055\041\056\036\062\042\063" +
    "\047\064\053\072\360\001\002\000\020\002\uff88\027\uff88" +
    "\041\uff88\051\uff88\065\uff88\114\uff88\115\uff88\001\002\000" +
    "\040\002\uffde\004\u0116\015\u0114\027\uffde\041\uffde\051\uffde" +
    "\065\uffde\071\065\072\070\073\066\074\067\075\063\107" +
    "\uffde\114\uffde\115\uffde\001\002\000\020\002\uffd7\027\363" +
    "\041\uffd7\051\uffd7\065\uffd7\114\uffd7\115\uffd7\001\002\000" +
    "\006\004\u010a\064\u0108\001\002\000\016\002\uffd5\041\uffd5" +
    "\051\366\065\uffd5\114\uffd5\115\uffd5\001\002\000\014\002" +
    "\uffd1\041\uffd1\065\uffd1\114\371\115\uffd1\001\002\000\056" +
    "\002\uff8a\004\055\005\046\006\045\007\052\013\uff8a\026" +
    "\126\035\122\036\044\040\uff8a\041\uff8a\052\035\053\037" +
    "\054\054\055\041\056\036\062\042\063\047\064\123\065" +
    "\uff8a\114\uff8a\115\uff8a\001\002\000\020\002\uffd4\013\172" +
    "\040\173\041\uffd4\065\uffd4\114\uffd4\115\uffd4\001\002\000" +
    "\012\002\uffcf\041\uffcf\065\uffcf\115\375\001\002\000\004" +
    "\017\372\001\002\000\004\004\055\001\002\000\012\002" +
    "\uffd0\041\uffd0\065\uffd0\115\uffd0\001\002\000\010\002\uffcd" +
    "\041\377\065\uffcd\001\002\000\052\002\uff8a\004\055\005" +
    "\046\006\045\007\052\013\uff8a\026\126\035\122\036\044" +
    "\040\uff8a\041\uff8a\052\035\053\037\054\054\055\041\056" +
    "\036\062\042\063\047\064\123\065\uff8a\001\002\000\014" +
    "\002\uffce\013\172\040\173\041\uffce\065\uffce\001\002\000" +
    "\004\017\u0101\001\002\000\006\002\uffe1\065\uffe1\001\002" +
    "\000\004\004\055\001\002\000\006\002\uffcc\065\uffcc\001" +
    "\002\000\014\002\uffc9\004\uffc9\016\u0105\022\u0104\065\uffc9" +
    "\001\002\000\010\002\uffc7\004\uffc7\065\uffc7\001\002\000" +
    "\010\002\uffc8\004\uffc8\065\uffc8\001\002\000\010\002\uffcb" +
    "\004\055\065\uffcb\001\002\000\006\002\uffca\065\uffca\001" +
    "\002\000\006\044\006\064\010\001\002\000\016\002\uffd6" +
    "\041\uffd6\051\uffd6\065\uffd6\114\uffd6\115\uffd6\001\002\000" +
    "\022\002\uffdc\015\u010e\041\uffdc\051\uffdc\065\uffdc\107\uffdc" +
    "\114\uffdc\115\uffdc\001\002\000\020\002\uffd9\041\uffd9\051" +
    "\uffd9\065\uffd9\107\u010c\114\uffd9\115\uffd9\001\002\000\006" +
    "\004\u010a\064\u0108\001\002\000\016\002\uffd8\041\uffd8\051" +
    "\uffd8\065\uffd8\114\uffd8\115\uffd8\001\002\000\004\004\u010f" +
    "\001\002\000\020\002\uffdb\041\uffdb\051\uffdb\065\uffdb\107" +
    "\uffdb\114\uffdb\115\uffdb\001\002\000\004\065\u0111\001\002" +
    "\000\004\015\u0112\001\002\000\004\004\u0113\001\002\000" +
    "\020\002\uffda\041\uffda\051\uffda\065\uffda\107\uffda\114\uffda" +
    "\115\uffda\001\002\000\004\004\u011b\001\002\000\022\002" +
    "\uff85\027\uff85\041\uff85\051\uff85\065\uff85\107\u0119\114\uff85" +
    "\115\uff85\001\002\000\022\002\uff87\027\uff87\041\uff87\051" +
    "\uff87\065\uff87\107\u0117\114\uff87\115\uff87\001\002\000\036" +
    "\004\055\005\046\006\045\007\052\036\044\052\035\053" +
    "\037\054\054\055\041\056\036\062\042\063\047\064\053" +
    "\072\360\001\002\000\020\002\uff86\027\uff86\041\uff86\051" +
    "\uff86\065\uff86\114\uff86\115\uff86\001\002\000\036\004\055" +
    "\005\046\006\045\007\052\036\044\052\035\053\037\054" +
    "\054\055\041\056\036\062\042\063\047\064\053\072\360" +
    "\001\002\000\020\002\uff84\027\uff84\041\uff84\051\uff84\065" +
    "\uff84\114\uff84\115\uff84\001\002\000\022\002\uffdd\027\uffdd" +
    "\041\uffdd\051\uffdd\065\uffdd\107\uffdd\114\uffdd\115\uffdd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\024\002\020\003\013\004\011\005\015\006" +
    "\003\007\022\010\010\011\006\012\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\356\001\001\000" +
    "\002\001\001\000\004\005\353\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\031\036\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\031\036\032\001\001\000\002" +
    "\001\001\000\012\027\042\033\047\037\050\040\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\060\027\042\033\047" +
    "\037\061\040\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\076" +
    "\027\042\033\047\037\061\040\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\027\042\033\047\037\074" +
    "\040\037\001\001\000\002\001\001\000\012\027\042\033" +
    "\047\037\073\040\037\001\001\000\012\027\042\033\047" +
    "\037\072\040\037\001\001\000\012\027\042\033\047\037" +
    "\071\040\037\001\001\000\012\027\042\033\047\037\070" +
    "\040\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\020\123\027\042\033\047\037" +
    "\124\040\037\001\001\000\002\001\001\000\016\005\060" +
    "\020\176\027\042\033\047\037\177\040\037\001\001\000" +
    "\002\001\001\000\004\041\131\001\001\000\002\001\001" +
    "\000\004\005\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\027\042\033\047\037\161\040\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\020\174\027\042\033\047\037\124\040" +
    "\037\001\001\000\014\020\173\027\042\033\047\037\124" +
    "\040\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\076\020\176\027\042\033\047\037\177\040\037" +
    "\001\001\000\002\001\001\000\004\041\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\211\027\042" +
    "\033\047\037\124\040\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\256\001\001\000\002\001\001\000\010\005" +
    "\262\033\261\047\260\001\001\000\002\001\001\000\006" +
    "\033\261\047\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\273\033" +
    "\261\047\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\312\014\311\015\313\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\315\001\001" +
    "\000\004\016\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\323\001\001\000\004" +
    "\033\332\001\001\000\004\044\325\001\001\000\002\001" +
    "\001\000\004\017\327\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\335\027\042\033\047" +
    "\037\124\040\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\342" +
    "\014\311\015\313\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\022\361\027\042\033\047\037\360\040" +
    "\037\001\001\000\002\001\001\000\004\023\u0114\001\001" +
    "\000\004\024\363\001\001\000\006\025\u010a\045\u0108\001" +
    "\001\000\004\026\364\001\001\000\004\030\367\001\001" +
    "\000\014\020\366\027\042\033\047\037\124\040\037\001" +
    "\001\000\002\001\001\000\004\031\373\001\001\000\002" +
    "\001\001\000\004\027\372\001\001\000\002\001\001\000" +
    "\004\032\377\001\001\000\014\020\375\027\042\033\047" +
    "\037\124\040\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\u0102\046\u0101\001\001" +
    "\000\002\001\001\000\004\050\u0105\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\u0102\046\u0106\001\001" +
    "\000\002\001\001\000\004\005\u010f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\u010a" +
    "\045\u010c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\022\u0117\027\042\033\047" +
    "\037\360\040\037\001\001\000\002\001\001\000\014\022" +
    "\u0119\027\042\033\047\037\360\040\037\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  public  Exp parseResult;
  Lexer lexer;
  public Exp getParseResult()
  {
	  parseResult=action_obj.start_exp;
	  return parseResult;
  }
  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ArrayList<ErrorMsg.ErrorMsg> errorMsgList=new ArrayList<ErrorMsg.ErrorMsg>();
	ErrorMsg.ErrorMsg errorMsg=new ErrorMsg.ErrorMsg();
  public void report_error(String message, 
			   java_cup.runtime.Symbol info) {
      errorMsgList.add(new ErrorMsg.ErrorMsg(info.left, message));
  }

  public parser(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 static  Symbol sym(String s) {
	         return  Symbol.symbol(s);
	        }
	    
  private final parser parser;
  public Exp start_exp;
  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // select ::= LPAREN select RPAREN UNION LPAREN select RPAREN UNION LPAREN select RPAREN 
            {
              SelectExp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // select ::= LPAREN select RPAREN UNION ALL LPAREN select RPAREN 
            {
              SelectExp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // select ::= LPAREN select RPAREN UNION LPAREN select RPAREN 
            {
              SelectExp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // select_expr ::= value as_or_not COMMA select_expr 
            {
              SelectExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AsOrNot as = (AsOrNot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectExpr s = (SelectExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(v,as,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // select_expr ::= value as_or_not 
            {
              SelectExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AsOrNot as = (AsOrNot)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(v,as,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // select_expr ::= value NAME COMMA select_expr 
            {
              SelectExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectExpr s = (SelectExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(v,new AsOrNot(new Symbol(N)),s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // select_expr ::= value NAME 
            {
              SelectExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(v,new AsOrNot(new Symbol(N)),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // select_expr ::= TIMES 
            {
              SelectExpr RESULT =null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object T = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(new ColValue(new ColName(null, new Symbol("*"))),null,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // bool_expr ::= value NOT LIKE STRING 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		new LikeEscapeExp(v,false,false,S,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // bool_expr ::= 
            {
              BoolExp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // bool_expr ::= value LIKE STRING ESCAPE STRING 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String S = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		new LikeEscapeExp(v,true,true,S,S2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // bool_expr ::= value LIKE STRING 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		new LikeEscapeExp(v,true,false,S,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // bool_expr ::= LPAREN bool_expr RPAREN 
            {
              BoolExp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // bool_expr ::= value cop ALL LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new AllExp(v,c,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // bool_expr ::= value cop ANY LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new AnyExp(v,c,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // bool_expr ::= value NOT IN LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new InExp(false,v,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // bool_expr ::= value IN LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new InExp(true,v,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // bool_expr ::= NOT EXISTS LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new BoolExsitExp(false,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // bool_expr ::= EXISTS LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new BoolExsitExp(true,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // bool_expr ::= bool_expr OR bool_expr 
            {
              BoolExp RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BoolExp b1 = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp b2 = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new BoolOrExp(b1,b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // bool_expr ::= bool_expr AND bool_expr 
            {
              BoolExp RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BoolExp b1 = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp b2 = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new BoolAndExp(b1,b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // bool_expr ::= value cop value 
            {
              BoolExp RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		new CompBoolExp(v1,c,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cop ::= NEQ 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("NEQ"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cop ::= GE 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("GE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cop ::= LE 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("LE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cop ::= EQ 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("EQ"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cop ::= GT 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("GT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cop ::= LT 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("LT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // value ::= func LPAREN col_name RPAREN 
            {
              Value RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new FuncValue(f,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // value ::= LPAREN select RPAREN 
            {
              Value RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new SubqueryValue(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // value ::= value MOD value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("MOD"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // value ::= value DIVIDE value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("DIVIDE"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // value ::= value TIMES value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("TIMES"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // value ::= value MINUS value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("MINUS"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // value ::= value PLUS value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("PLUS"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // value ::= const_value 
            {
              Value RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValue v = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // value ::= col_name 
            {
              Value RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ColValue(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // value ::= LPAREN value RPAREN 
            {
              Value RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // func ::= SUM 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("SUM");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // func ::= COUNT 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("COUNT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // func ::= MAX 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("MAX");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // func ::= MIN 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("MIN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // func ::= AVG 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("AVG");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // alter ::= ALTER TABLE NAME DROP NAME 
            {
              AlterExp RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AlterDropExp(Aleft,new Symbol(N),new Symbol(N1));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // alter ::= ALTER TABLE NAME ADD NAME data_type 
            {
              AlterExp RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AlterAddExp(Aleft,new Symbol(N),new Symbol(N1),dt);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // drop ::= DROP DATABASE NAME SEMICOLON 
            {
              DropExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		new DropDatabaseExp(Dleft,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // drop ::= DROP INDEX NAME ON NAME SEMICOLON 
            {
              DropExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String N2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		new DropIndexExp(Dleft,new Symbol(N2),new Symbol(N1));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // drop ::= DROP VIEW NAME SEMICOLON 
            {
              DropExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		new DropViewExp(Dleft,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // drop ::= DROP TABLE NAME SEMICOLON 
            {
              DropExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		new DropTableExp(Dleft,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // update ::= UPDATE NAME SET assignlist SEMICOLON 
            {
              UpdateExp RESULT =null;
		int Uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object U = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignList a = (AssignList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new UpdateExp(Uleft,new Symbol(N),a,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("update",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // update ::= UPDATE NAME SET assignlist WHERE bool_expr SEMICOLON 
            {
              UpdateExp RESULT =null;
		int Uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object U = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AssignList a = (AssignList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new UpdateExp(Uleft,new Symbol(N),a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("update",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assignlist ::= assignment assignlist 
            {
              AssignList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignList al = (AssignList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AssignList(a,al);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignlist",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assignlist ::= assignment 
            {
              AssignList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AssignList(a,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignlist",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assignment ::= NAME EQ value 
            {
              Assignment RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Assignment(Nleft,new Symbol(N),v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // delete ::= DELETE FROM NAME WHERE bool_expr SEMICOLON 
            {
              DeleteExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT=new DeleteExp(Dleft,new Symbol(N),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delete",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // delete ::= DELETE FROM NAME SEMICOLON 
            {
              DeleteExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new DeleteExp(Dleft,new Symbol(N),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delete",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // namelist ::= NAME namelist 
            {
              NameList RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameList(Nleft,new Symbol(N),nl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // namelist ::= NAME 
            {
              NameList RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameList(Nleft,new Symbol(N),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // const_value_list ::= const_value const_value_list 
            {
              ConstValueList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ConstValue c = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValueList cl = (ConstValueList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueList(c,cl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // const_value_list ::= const_value 
            {
              ConstValueList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValue c = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueList(c,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // insert ::= INSERT INTO NAME namelist VALUES LPAREN const_value_list RPAREN SEMICOLON 
            {
              InsertExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstValueList cl = (ConstValueList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new InsertExp(ileft,new Symbol(N),nl,cl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // insert ::= INSERT INTO NAME namelist VALUES LPAREN select RPAREN SEMICOLON 
            {
              InsertExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new InsertExp(ileft,new Symbol(N),nl,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // insert ::= INSERT INTO NAME VALUES LPAREN select RPAREN SEMICOLON 
            {
              InsertExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new InsertExp(ileft,new Symbol(N),s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // insert ::= INSERT INTO NAME VALUES LPAREN const_value_list RPAREN SEMICOLON 
            {
              InsertExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstValueList cl = (ConstValueList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new InsertExp(ileft,new Symbol(N),cl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // const_value ::= NULL 
            {
              ConstValue RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueNull();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // const_value ::= FLOATVALUE 
            {
              ConstValue RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueFloat(fleft,f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // const_value ::= FALSE 
            {
              ConstValue RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueBoolean(tleft,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // const_value ::= TRUE 
            {
              ConstValue RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueBoolean(tleft,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // const_value ::= STRING 
            {
              ConstValue RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueString(sleft,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // const_value ::= INTVALUE 
            {
              ConstValue RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueInt(ileft,i.intValue());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asc_or_desc ::= DESC 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("DESC");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asc_or_desc",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asc_or_desc ::= ASC 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("ASC");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asc_or_desc",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asc_or_desc ::= 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("ASC");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asc_or_desc",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // order_list ::= col_name asc_or_desc order_list 
            {
              OrderList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ColName n = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OrderList o = (OrderList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OrderList(n,a,o);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // order_list ::= col_name asc_or_desc 
            {
              OrderList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ColName n = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OrderList(n,a,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // order_clause ::= ORDER BY order_list 
            {
              OrderClause RESULT =null;
		int olleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int olright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OrderList ol = (OrderList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrderClause(ol); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_clause",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // order_clause ::= 
            {
              OrderClause RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_clause",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // having_clause ::= HAVING bool_expr 
            {
              HavingClause RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp be = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new HavingClause(be); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("having_clause",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // having_clause ::= 
            {
              HavingClause RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("having_clause",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // group_clause ::= GROUP BY col_name 
            {
              GroupClause RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new GroupClause(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_clause",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // group_clause ::= 
            {
              GroupClause RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_clause",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // col_name ::= NAME DOT NAME 
            {
              ColName RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ColName(new Symbol(N1),new Symbol(N2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col_name",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // col_name ::= NAME 
            {
              ColName RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ColName(null,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col_name",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // where_clause ::= WHERE bool_expr 
            {
              WhereClause RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new WhereClause(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("where_clause",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // where_clause ::= 
            {
              WhereClause RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("where_clause",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // from_clause ::= FROM table_ref_list 
            {
              FromClause RESULT =null;
		int trlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableRefList trl = (TableRefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new FromClause(trl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("from_clause",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // from_clause ::= 
            {
              FromClause RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("from_clause",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // table_ref_list ::= table_ref COMMA table_ref_list 
            {
              TableRefList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TableRef t = (TableRef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int trlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableRefList trl = (TableRefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRefList(t,trl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // table_ref_list ::= table_ref 
            {
              TableRefList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableRef t = (TableRef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRefList(t,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // table_ref ::= LPAREN select RPAREN AS NAME 
            {
              TableRef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRef(null,new Symbol(N),s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // table_ref ::= NAME AS NAME 
            {
              TableRef RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRef(new Symbol(N1),new Symbol(N2),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // table_ref ::= NAME 
            {
              TableRef RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRef(new Symbol(N),null,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // as_or_not ::= AS NAME 
            {
              AsOrNot RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsOrNot(new Symbol(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("as_or_not",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // as_or_not ::= 
            {
              AsOrNot RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("as_or_not",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // distinct_or_not ::= DISTINCT 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("DISTINCT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("distinct_or_not",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // distinct_or_not ::= 
            {
              Symbol RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("distinct_or_not",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // select ::= SELECT distinct_or_not select_expr from_clause where_clause group_clause having_clause order_clause 
            {
              SelectExp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		SelectExpr s = (SelectExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		FromClause f = (FromClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WhereClause w = (WhereClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GroupClause g = (GroupClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HavingClause h = (HavingClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OrderClause o = (OrderClause)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SelectExp(d, s, f, w, g, h, o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // primary_key ::= PRIMARY KEY 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("PRIMARYKEY");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_key",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // primary_key ::= 
            {
              Symbol RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_key",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // auto_increasement ::= AUTO INCREMENT 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("AUTOINCREMENT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auto_increasement",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // auto_increasement ::= 
            {
              Symbol RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auto_increasement",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // null_or_not ::= NOT NULL 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("NOTNULL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("null_or_not",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // null_or_not ::= NULL 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("NULL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("null_or_not",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // null_or_not ::= 
            {
              Symbol RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("null_or_not",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // data_type ::= BOOLEAN 
            {
              DataType RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameTy( new Symbol("boolean"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // data_type ::= CHAR LPAREN INTVALUE RPAREN 
            {
              DataType RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object L = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer I = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ArrayTy( new Symbol("char"),(Integer)I);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // data_type ::= FLOAT 
            {
              DataType RESULT =null;
		int Fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameTy( new Symbol("float"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // data_type ::= INT 
            {
              DataType RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameTy( new Symbol("int"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // default_value ::= DEFAULT const_value 
            {
              ConstValue RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValue cv = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_value",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // default_value ::= 
            {
              ConstValue RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_value",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // column_definition ::= NAME data_type CHECK LPAREN bool_expr RPAREN 
            {
              ColumnDefinition RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dtyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dtyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DataType dty = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ColumnDefinition(ileft, new Symbol(i), dty, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_definition",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // column_definition ::= NAME data_type null_or_not default_value auto_increasement primary_key 
            {
              ColumnDefinition RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Symbol non = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstValue dv = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol ai = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pkright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol pk = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ColumnDefinition(Nleft,new Symbol(N),dt,pk,non,ai,dv); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_definition",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // create_element ::= column_definition 
            {
              CreateElement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColumnDefinition c = (ColumnDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_element",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // create_element_list ::= create_element COMMA create_element_list 
            {
              CreateElementList RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CreateElement c1 = (CreateElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CreateElementList c = (CreateElementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateElementList( c1,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_element_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // create_element_list ::= create_element 
            {
              CreateElementList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CreateElement c = (CreateElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateElementList( c,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_element_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // create ::= CREATE NAME AS select 
            {
              CreateExp RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateViewExp(Cleft,new Symbol(N),s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // create ::= CREATE INDEX NAME ON NAME LPAREN NAME RPAREN 
            {
              CreateExp RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object O = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String N2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object L = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String N3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateIndexExp(Cleft,new Symbol(N1),new Symbol(N2),new Symbol(N3),false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // create ::= USE NAME SEMICOLON 
            {
              CreateExp RESULT =null;
		int Uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object U = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateDatabaseExp(Uleft,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // create ::= CREATE DATABASE NAME SEMICOLON 
            {
              CreateExp RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateDatabaseExp(Cleft,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // create ::= CREATE TABLE NAME LPAREN create_element_list RPAREN SEMICOLON 
            {
              CreateExp RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int Tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object T = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int LPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int LPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object LP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CreateElementList c = (CreateElementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int RPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int RPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object RP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateTableExp(Cleft,new Symbol(N),c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sql ::= alter 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AlterExp a = (AlterExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sql ::= drop 
            {
              Exp RESULT =null;
		int drleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int drright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DropExp dr = (DropExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=dr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sql ::= update 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UpdateExp u = (UpdateExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=u;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sql ::= delete 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeleteExp d = (DeleteExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=d;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sql ::= insert 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InsertExp i = (InsertExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sql ::= select 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sql ::= create 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CreateExp c = (CreateExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // database ::= sql 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("database",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= database EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
		/*my code */
		start_exp=start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

