
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 05 19:14:41 IRKST 2011
//----------------------------------------------------

package Parse;

import Absyn.*;
import java.util.ArrayList;
import Symbol.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 05 19:14:41 IRKST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\222\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\053\004\000\002\052" +
    "\010\000\002\052\013\000\002\054\003\000\002\054\004" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\005\010\000\002\005\005\000\002\005\012\000\002" +
    "\005\007\000\002\056\004\000\002\014\003\000\002\014" +
    "\005\000\002\015\003\000\002\015\006\000\002\015\007" +
    "\000\002\015\014\000\002\016\010\000\002\016\010\000" +
    "\002\043\002\000\002\043\004\000\002\044\003\000\002" +
    "\044\003\000\002\044\006\000\002\044\003\000\002\044" +
    "\003\000\002\017\002\000\002\017\003\000\002\017\004" +
    "\000\002\045\002\000\002\045\004\000\002\020\002\000" +
    "\002\020\004\000\002\006\012\000\002\022\002\000\002" +
    "\022\003\000\002\024\002\000\002\024\004\000\002\026" +
    "\003\000\002\026\005\000\002\026\007\000\002\046\003" +
    "\000\002\046\005\000\002\025\002\000\002\025\004\000" +
    "\002\027\002\000\002\027\004\000\002\030\003\000\002" +
    "\030\005\000\002\031\002\000\002\031\005\000\002\032" +
    "\002\000\002\032\004\000\002\033\002\000\002\033\005" +
    "\000\002\047\004\000\002\047\006\000\002\051\002\000" +
    "\002\051\003\000\002\051\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\007\011\000\002\007\011" +
    "\000\002\007\014\000\002\007\014\000\002\050\003\000" +
    "\002\050\005\000\002\035\003\000\002\035\005\000\002" +
    "\010\005\000\002\010\007\000\002\036\005\000\002\037" +
    "\003\000\002\037\005\000\002\011\010\000\002\011\006" +
    "\000\002\012\005\000\002\012\005\000\002\012\007\000" +
    "\002\012\005\000\002\013\010\000\002\013\007\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\040\005\000\002\040\003" +
    "\000\002\040\003\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\006\000\002\040\006\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\006\000\002" +
    "\021\007\000\002\021\007\000\002\021\010\000\002\021" +
    "\010\000\002\021\010\000\002\021\005\000\002\021\005" +
    "\000\002\021\007\000\002\021\006\000\002\023\003\000" +
    "\002\023\004\000\002\023\006\000\002\023\004\000\002" +
    "\023\006\000\002\006\011\000\002\006\012\000\002\006" +
    "\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0145\000\030\010\023\020\017\021\032\023\024\031" +
    "\021\044\007\046\033\064\014\106\030\117\004\120\026" +
    "\001\002\000\004\004\233\001\002\000\004\105\u0146\001" +
    "\002\000\004\105\u0145\001\002\000\040\004\uffcf\005\uffcf" +
    "\006\uffcf\007\uffcf\036\uffcf\052\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\062\uffcf\063\uffcf\064\uffcf\072\uffcf\113\u0116" +
    "\001\002\000\004\105\u0115\001\002\000\004\002\000\001" +
    "\002\000\004\105\u0114\001\002\000\004\105\u0113\001\002" +
    "\000\006\044\007\064\014\001\002\000\004\105\u0110\001" +
    "\002\000\004\105\u010f\001\002\000\012\024\324\030\323" +
    "\045\325\047\326\001\002\000\004\002\322\001\002\000" +
    "\004\032\276\001\002\000\004\105\275\001\002\000\004" +
    "\045\257\001\002\000\012\024\246\030\245\045\247\047" +
    "\250\001\002\000\004\105\244\001\002\000\010\031\226" +
    "\044\230\046\227\001\002\000\032\002\uffff\010\023\020" +
    "\017\021\032\023\024\031\021\044\007\046\033\064\014" +
    "\106\030\117\004\120\026\001\002\000\004\004\222\001" +
    "\002\000\004\105\221\001\002\000\004\027\215\001\002" +
    "\000\004\004\034\001\002\000\004\043\035\001\002\000" +
    "\004\004\037\001\002\000\006\051\131\105\uffa1\001\002" +
    "\000\004\102\043\001\002\000\010\051\uffa4\105\uffa4\107" +
    "\041\001\002\000\004\004\037\001\002\000\006\051\uffa3" +
    "\105\uffa3\001\002\000\034\004\064\005\055\006\054\007" +
    "\062\036\053\052\044\053\046\054\063\055\050\056\045" +
    "\062\051\063\056\064\061\001\002\000\004\064\uff9a\001" +
    "\002\000\004\064\uff96\001\002\000\004\064\uff97\001\002" +
    "\000\004\064\124\001\002\000\004\064\uff98\001\002\000" +
    "\072\004\uffb3\013\uffb3\015\uffb3\027\uffb3\034\uffb3\035\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\051\uffb3\065\uffb3\066\uffb3\071" +
    "\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3" +
    "\100\uffb3\101\uffb3\102\uffb3\103\uffb3\105\uffb3\107\uffb3\114" +
    "\uffb3\115\uffb3\116\uffb3\001\002\000\066\004\uff94\013\uff94" +
    "\015\uff94\027\uff94\034\uff94\035\uff94\040\uff94\041\uff94\051" +
    "\uff94\065\uff94\071\uff94\072\uff94\073\uff94\074\uff94\075\uff94" +
    "\076\uff94\077\uff94\100\uff94\101\uff94\102\uff94\103\uff94\105" +
    "\uff94\107\uff94\114\uff94\115\uff94\116\uff94\001\002\000\072" +
    "\004\uffb0\013\uffb0\015\uffb0\027\uffb0\034\uffb0\035\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\051\uffb0\065\uffb0\066\uffb0\071\uffb0" +
    "\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100" +
    "\uffb0\101\uffb0\102\uffb0\103\uffb0\105\uffb0\107\uffb0\114\uffb0" +
    "\115\uffb0\116\uffb0\001\002\000\072\004\uffb5\013\uffb5\015" +
    "\uffb5\027\uffb5\034\uffb5\035\uffb5\040\uffb5\041\uffb5\042\uffb5" +
    "\051\uffb5\065\uffb5\066\uffb5\071\uffb5\072\uffb5\073\uffb5\074" +
    "\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5" +
    "\103\uffb5\105\uffb5\107\uffb5\114\uffb5\115\uffb5\116\uffb5\001" +
    "\002\000\072\004\uffb4\013\uffb4\015\uffb4\027\uffb4\034\uffb4" +
    "\035\uffb4\040\uffb4\041\uffb4\042\uffb4\051\uffb4\065\uffb4\066" +
    "\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4" +
    "\077\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\105\uffb4\107" +
    "\uffb4\114\uffb4\115\uffb4\116\uffb4\001\002\000\072\004\uffb2" +
    "\013\uffb2\015\uffb2\027\uffb2\034\uffb2\035\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\051\uffb2\065\uffb2\066\uffb2\071\uffb2\072\uffb2" +
    "\073\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101" +
    "\uffb2\102\uffb2\103\uffb2\105\uffb2\107\uffb2\114\uffb2\115\uffb2" +
    "\116\uffb2\001\002\000\066\004\uff93\013\uff93\015\uff93\027" +
    "\uff93\034\uff93\035\uff93\040\uff93\041\uff93\051\uff93\065\uff93" +
    "\071\uff93\072\uff93\073\uff93\074\uff93\075\uff93\076\uff93\077" +
    "\uff93\100\uff93\101\uff93\102\uff93\103\uff93\105\uff93\107\uff93" +
    "\114\uff93\115\uff93\116\uff93\001\002\000\022\051\uffa5\071" +
    "\074\072\077\073\075\074\076\075\072\105\uffa5\107\uffa5" +
    "\001\002\000\036\004\064\005\055\006\054\007\062\036" +
    "\053\044\007\052\044\053\046\054\063\055\050\056\045" +
    "\062\051\063\056\064\067\001\002\000\072\004\uffb1\013" +
    "\uffb1\015\uffb1\027\uffb1\034\uffb1\035\uffb1\040\uffb1\041\uffb1" +
    "\042\uffb1\051\uffb1\065\uffb1\066\uffb1\071\uffb1\072\uffb1\073" +
    "\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1" +
    "\102\uffb1\103\uffb1\105\uffb1\107\uffb1\114\uffb1\115\uffb1\116" +
    "\uffb1\001\002\000\004\064\uff99\001\002\000\074\004\uffc2" +
    "\013\uffc2\015\uffc2\016\uffc2\022\uffc2\027\uffc2\034\uffc2\035" +
    "\uffc2\040\uffc2\041\uffc2\051\uffc2\065\uffc2\070\065\071\uffc2" +
    "\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100" +
    "\uffc2\101\uffc2\102\uffc2\103\uffc2\105\uffc2\107\uffc2\114\uffc2" +
    "\115\uffc2\116\uffc2\001\002\000\004\004\066\001\002\000" +
    "\072\004\uffc1\013\uffc1\015\uffc1\016\uffc1\022\uffc1\027\uffc1" +
    "\034\uffc1\035\uffc1\040\uffc1\041\uffc1\051\uffc1\065\uffc1\071" +
    "\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1" +
    "\100\uffc1\101\uffc1\102\uffc1\103\uffc1\105\uffc1\107\uffc1\114" +
    "\uffc1\115\uffc1\116\uffc1\001\002\000\036\004\064\005\055" +
    "\006\054\007\062\036\053\044\007\052\044\053\046\054" +
    "\063\055\050\056\045\062\051\063\056\064\067\001\002" +
    "\000\004\065\105\001\002\000\016\065\073\071\074\072" +
    "\077\073\075\074\076\075\072\001\002\000\034\004\064" +
    "\005\055\006\054\007\062\036\053\052\044\053\046\054" +
    "\063\055\050\056\045\062\051\063\056\064\061\001\002" +
    "\000\066\004\uff95\013\uff95\015\uff95\027\uff95\034\uff95\035" +
    "\uff95\040\uff95\041\uff95\051\uff95\065\uff95\071\uff95\072\uff95" +
    "\073\uff95\074\uff95\075\uff95\076\uff95\077\uff95\100\uff95\101" +
    "\uff95\102\uff95\103\uff95\105\uff95\107\uff95\114\uff95\115\uff95" +
    "\116\uff95\001\002\000\034\004\064\005\055\006\054\007" +
    "\062\036\053\052\044\053\046\054\063\055\050\056\045" +
    "\062\051\063\056\064\061\001\002\000\034\004\064\005" +
    "\055\006\054\007\062\036\053\052\044\053\046\054\063" +
    "\055\050\056\045\062\051\063\056\064\061\001\002\000" +
    "\034\004\064\005\055\006\054\007\062\036\053\052\044" +
    "\053\046\054\063\055\050\056\045\062\051\063\056\064" +
    "\061\001\002\000\034\004\064\005\055\006\054\007\062" +
    "\036\053\052\044\053\046\054\063\055\050\056\045\062" +
    "\051\063\056\064\061\001\002\000\066\004\uff90\013\uff90" +
    "\015\uff90\027\uff90\034\uff90\035\uff90\040\uff90\041\uff90\051" +
    "\uff90\065\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075\uff90" +
    "\076\uff90\077\uff90\100\uff90\101\uff90\102\uff90\103\uff90\105" +
    "\uff90\107\uff90\114\uff90\115\uff90\116\uff90\001\002\000\066" +
    "\004\uff8f\013\uff8f\015\uff8f\027\uff8f\034\uff8f\035\uff8f\040" +
    "\uff8f\041\uff8f\051\uff8f\065\uff8f\071\uff8f\072\uff8f\073\uff8f" +
    "\074\uff8f\075\uff8f\076\uff8f\077\uff8f\100\uff8f\101\uff8f\102" +
    "\uff8f\103\uff8f\105\uff8f\107\uff8f\114\uff8f\115\uff8f\116\uff8f" +
    "\001\002\000\066\004\uff91\013\uff91\015\uff91\027\uff91\034" +
    "\uff91\035\uff91\040\uff91\041\uff91\051\uff91\065\uff91\071\uff91" +
    "\072\077\073\uff91\074\076\075\072\076\uff91\077\uff91\100" +
    "\uff91\101\uff91\102\uff91\103\uff91\105\uff91\107\uff91\114\uff91" +
    "\115\uff91\116\uff91\001\002\000\066\004\uff92\013\uff92\015" +
    "\uff92\027\uff92\034\uff92\035\uff92\040\uff92\041\uff92\051\uff92" +
    "\065\uff92\071\uff92\072\077\073\uff92\074\076\075\072\076" +
    "\uff92\077\uff92\100\uff92\101\uff92\102\uff92\103\uff92\105\uff92" +
    "\107\uff92\114\uff92\115\uff92\116\uff92\001\002\000\066\004" +
    "\uff8e\013\uff8e\015\uff8e\027\uff8e\034\uff8e\035\uff8e\040\uff8e" +
    "\041\uff8e\051\uff8e\065\uff8e\071\uff8e\072\uff8e\073\uff8e\074" +
    "\uff8e\075\uff8e\076\uff8e\077\uff8e\100\uff8e\101\uff8e\102\uff8e" +
    "\103\uff8e\105\uff8e\107\uff8e\114\uff8e\115\uff8e\116\uff8e\001" +
    "\002\000\066\004\uff8d\013\uff8d\015\uff8d\027\uff8d\034\uff8d" +
    "\035\uff8d\040\uff8d\041\uff8d\051\uff8d\065\uff8d\071\uff8d\072" +
    "\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d\077\uff8d\100\uff8d" +
    "\101\uff8d\102\uff8d\103\uff8d\105\uff8d\107\uff8d\114\uff8d\115" +
    "\uff8d\116\uff8d\001\002\000\004\065\107\001\002\000\042" +
    "\034\uff8d\035\uff8d\065\uff8d\071\uff8d\072\uff8d\073\uff8d\074" +
    "\uff8d\075\uff8d\076\uff8d\077\uff8d\100\uff8d\101\uff8d\102\uff8d" +
    "\103\uff8d\104\110\116\uff8d\001\002\000\006\012\111\064" +
    "\112\001\002\000\004\064\121\001\002\000\006\044\007" +
    "\064\014\001\002\000\004\065\114\001\002\000\010\065" +
    "\uff72\104\115\105\uff72\001\002\000\004\064\116\001\002" +
    "\000\006\044\007\064\014\001\002\000\004\065\120\001" +
    "\002\000\006\065\uff70\105\uff70\001\002\000\006\044\007" +
    "\064\014\001\002\000\004\065\123\001\002\000\006\065" +
    "\uff71\105\uff71\001\002\000\006\004\064\072\126\001\002" +
    "\000\004\065\130\001\002\000\004\065\127\001\002\000" +
    "\066\004\uff8b\013\uff8b\015\uff8b\027\uff8b\034\uff8b\035\uff8b" +
    "\040\uff8b\041\uff8b\051\uff8b\065\uff8b\071\uff8b\072\uff8b\073" +
    "\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b\100\uff8b\101\uff8b" +
    "\102\uff8b\103\uff8b\105\uff8b\107\uff8b\114\uff8b\115\uff8b\116" +
    "\uff8b\001\002\000\066\004\uff8c\013\uff8c\015\uff8c\027\uff8c" +
    "\034\uff8c\035\uff8c\040\uff8c\041\uff8c\051\uff8c\065\uff8c\071" +
    "\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c" +
    "\100\uff8c\101\uff8c\102\uff8c\103\uff8c\105\uff8c\107\uff8c\114" +
    "\uff8c\115\uff8c\116\uff8c\001\002\000\040\004\064\005\055" +
    "\006\054\007\062\026\136\035\132\036\053\052\044\053" +
    "\046\054\063\055\050\056\045\062\051\063\056\064\133" +
    "\001\002\000\004\026\211\001\002\000\042\004\064\005" +
    "\055\006\054\007\062\026\136\035\132\036\053\044\007" +
    "\052\044\053\046\054\063\055\050\056\045\062\051\063" +
    "\056\064\205\001\002\000\010\013\201\040\202\105\uffa2" +
    "\001\002\000\036\034\153\035\151\071\074\072\077\073" +
    "\075\074\076\075\072\076\152\077\150\100\147\101\144" +
    "\102\146\103\145\116\143\001\002\000\004\064\137\001" +
    "\002\000\006\044\007\064\014\001\002\000\004\065\141" +
    "\001\002\000\020\013\uff81\040\uff81\041\uff81\065\uff81\105" +
    "\uff81\114\uff81\115\uff81\001\002\000\040\004\064\005\055" +
    "\006\054\007\062\012\170\014\171\036\053\052\044\053" +
    "\046\054\063\055\050\056\045\062\051\063\056\064\061" +
    "\001\002\000\004\064\165\001\002\000\040\004\uff86\005" +
    "\uff86\006\uff86\007\uff86\012\uff86\014\uff86\036\uff86\052\uff86" +
    "\053\uff86\054\uff86\055\uff86\056\uff86\062\uff86\063\uff86\064" +
    "\uff86\001\002\000\040\004\uff85\005\uff85\006\uff85\007\uff85" +
    "\012\uff85\014\uff85\036\uff85\052\uff85\053\uff85\054\uff85\055" +
    "\uff85\056\uff85\062\uff85\063\uff85\064\uff85\001\002\000\040" +
    "\004\uff88\005\uff88\006\uff88\007\uff88\012\uff88\014\uff88\036" +
    "\uff88\052\uff88\053\uff88\054\uff88\055\uff88\056\uff88\062\uff88" +
    "\063\uff88\064\uff88\001\002\000\040\004\uff87\005\uff87\006" +
    "\uff87\007\uff87\012\uff87\014\uff87\036\uff87\052\uff87\053\uff87" +
    "\054\uff87\055\uff87\056\uff87\062\uff87\063\uff87\064\uff87\001" +
    "\002\000\040\004\uff89\005\uff89\006\uff89\007\uff89\012\uff89" +
    "\014\uff89\036\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056" +
    "\uff89\062\uff89\063\uff89\064\uff89\001\002\000\006\034\157" +
    "\116\160\001\002\000\040\004\uff8a\005\uff8a\006\uff8a\007" +
    "\uff8a\012\uff8a\014\uff8a\036\uff8a\052\uff8a\053\uff8a\054\uff8a" +
    "\055\uff8a\056\uff8a\062\uff8a\063\uff8a\064\uff8a\001\002\000" +
    "\004\005\154\001\002\000\022\013\uff7a\025\155\040\uff7a" +
    "\041\uff7a\065\uff7a\105\uff7a\114\uff7a\115\uff7a\001\002\000" +
    "\004\005\156\001\002\000\020\013\uff79\040\uff79\041\uff79" +
    "\065\uff79\105\uff79\114\uff79\115\uff79\001\002\000\004\005" +
    "\164\001\002\000\004\064\161\001\002\000\006\044\007" +
    "\064\014\001\002\000\004\065\163\001\002\000\020\013" +
    "\uff7e\040\uff7e\041\uff7e\065\uff7e\105\uff7e\114\uff7e\115\uff7e" +
    "\001\002\000\020\013\uff78\040\uff78\041\uff78\065\uff78\105" +
    "\uff78\114\uff78\115\uff78\001\002\000\006\044\007\064\014" +
    "\001\002\000\004\065\167\001\002\000\020\013\uff7f\040" +
    "\uff7f\041\uff7f\065\uff7f\105\uff7f\114\uff7f\115\uff7f\001\002" +
    "\000\004\064\176\001\002\000\004\064\173\001\002\000" +
    "\032\013\uff84\040\uff84\041\uff84\065\uff84\071\074\072\077" +
    "\073\075\074\076\075\072\105\uff84\114\uff84\115\uff84\001" +
    "\002\000\006\044\007\064\014\001\002\000\004\065\175" +
    "\001\002\000\020\013\uff7d\040\uff7d\041\uff7d\065\uff7d\105" +
    "\uff7d\114\uff7d\115\uff7d\001\002\000\006\044\007\064\014" +
    "\001\002\000\004\065\200\001\002\000\020\013\uff7c\040" +
    "\uff7c\041\uff7c\065\uff7c\105\uff7c\114\uff7c\115\uff7c\001\002" +
    "\000\040\004\064\005\055\006\054\007\062\026\136\035" +
    "\132\036\053\052\044\053\046\054\063\055\050\056\045" +
    "\062\051\063\056\064\133\001\002\000\040\004\064\005" +
    "\055\006\054\007\062\026\136\035\132\036\053\052\044" +
    "\053\046\054\063\055\050\056\045\062\051\063\056\064" +
    "\133\001\002\000\020\013\201\040\uff82\041\uff82\065\uff82" +
    "\105\uff82\114\uff82\115\uff82\001\002\000\020\013\uff83\040" +
    "\uff83\041\uff83\065\uff83\105\uff83\114\uff83\115\uff83\001\002" +
    "\000\042\004\064\005\055\006\054\007\062\026\136\035" +
    "\132\036\053\044\007\052\044\053\046\054\063\055\050" +
    "\056\045\062\051\063\056\064\205\001\002\000\010\013" +
    "\201\040\202\065\210\001\002\000\040\034\153\035\151" +
    "\065\073\071\074\072\077\073\075\074\076\075\072\076" +
    "\152\077\150\100\147\101\144\102\146\103\145\116\143" +
    "\001\002\000\020\013\uff7b\040\uff7b\041\uff7b\065\uff7b\105" +
    "\uff7b\114\uff7b\115\uff7b\001\002\000\004\064\212\001\002" +
    "\000\006\044\007\064\014\001\002\000\004\065\214\001" +
    "\002\000\020\013\uff80\040\uff80\041\uff80\065\uff80\105\uff80" +
    "\114\uff80\115\uff80\001\002\000\004\004\216\001\002\000" +
    "\006\051\217\105\uffa7\001\002\000\040\004\064\005\055" +
    "\006\054\007\062\026\136\035\132\036\053\052\044\053" +
    "\046\054\063\055\050\056\045\062\051\063\056\064\133" +
    "\001\002\000\010\013\201\040\202\105\uffa6\001\002\000" +
    "\032\002\ufffa\010\ufffa\020\ufffa\021\ufffa\023\ufffa\031\ufffa" +
    "\044\ufffa\046\ufffa\064\ufffa\106\ufffa\117\ufffa\120\ufffa\001" +
    "\002\000\004\105\uffe7\001\002\000\004\002\ufffe\001\002" +
    "\000\012\031\226\037\ufff0\044\230\046\227\001\002\000" +
    "\004\037\231\001\002\000\012\031\uffed\037\uffed\044\uffed" +
    "\046\uffed\001\002\000\012\031\uffec\037\uffec\044\uffec\046" +
    "\uffec\001\002\000\012\031\uffee\037\uffee\044\uffee\046\uffee" +
    "\001\002\000\004\004\233\001\002\000\004\121\236\001" +
    "\002\000\014\065\uffa9\105\uffa9\107\234\121\uffa9\122\uffa9" +
    "\001\002\000\004\004\233\001\002\000\012\065\uffa8\105" +
    "\uffa8\121\uffa8\122\uffa8\001\002\000\004\004\233\001\002" +
    "\000\006\105\ufff2\122\240\001\002\000\004\120\241\001" +
    "\002\000\004\123\242\001\002\000\004\105\ufff1\001\002" +
    "\000\004\037\uffef\001\002\000\032\002\ufff4\010\ufff4\020" +
    "\ufff4\021\ufff4\023\ufff4\031\ufff4\044\ufff4\046\ufff4\064\ufff4" +
    "\106\ufff4\117\ufff4\120\ufff4\001\002\000\004\004\254\001" +
    "\002\000\004\004\253\001\002\000\004\004\233\001\002" +
    "\000\004\004\251\001\002\000\004\105\uff9f\001\002\000" +
    "\004\105\uffa0\001\002\000\004\105\uff9d\001\002\000\004" +
    "\037\255\001\002\000\004\004\256\001\002\000\004\105" +
    "\uff9e\001\002\000\004\004\260\001\002\000\006\011\261" +
    "\023\262\001\002\000\004\004\264\001\002\000\004\004" +
    "\263\001\002\000\004\105\uff9b\001\002\000\012\057\271" +
    "\060\267\061\270\111\266\001\002\000\004\105\uff9c\001" +
    "\002\000\026\035\uffd9\036\uffd9\042\uffd9\064\272\065\uffd9" +
    "\066\uffd9\067\uffd9\105\uffd9\107\uffd9\110\uffd9\001\002\000" +
    "\024\035\uffdb\036\uffdb\042\uffdb\065\uffdb\066\uffdb\067\uffdb" +
    "\105\uffdb\107\uffdb\110\uffdb\001\002\000\024\035\uffd8\036" +
    "\uffd8\042\uffd8\065\uffd8\066\uffd8\067\uffd8\105\uffd8\107\uffd8" +
    "\110\uffd8\001\002\000\024\035\uffdc\036\uffdc\042\uffdc\065" +
    "\uffdc\066\uffdc\067\uffdc\105\uffdc\107\uffdc\110\uffdc\001\002" +
    "\000\004\006\273\001\002\000\004\065\274\001\002\000" +
    "\024\035\uffda\036\uffda\042\uffda\065\uffda\066\uffda\067\uffda" +
    "\105\uffda\107\uffda\110\uffda\001\002\000\032\002\ufffc\010" +
    "\ufffc\020\ufffc\021\ufffc\023\ufffc\031\ufffc\044\ufffc\046\ufffc" +
    "\064\ufffc\106\ufffc\117\ufffc\120\ufffc\001\002\000\004\004" +
    "\277\001\002\000\006\050\300\064\301\001\002\000\004" +
    "\064\315\001\002\000\004\004\233\001\002\000\004\065" +
    "\303\001\002\000\004\050\304\001\002\000\004\064\305" +
    "\001\002\000\022\005\055\006\054\007\062\036\053\044" +
    "\007\062\051\063\056\064\014\001\002\000\004\065\314" +
    "\001\002\000\006\065\uffab\107\312\001\002\000\004\065" +
    "\311\001\002\000\004\105\uffad\001\002\000\016\005\055" +
    "\006\054\007\062\036\053\062\051\063\056\001\002\000" +
    "\004\065\uffaa\001\002\000\004\105\uffac\001\002\000\022" +
    "\005\055\006\054\007\062\036\053\044\007\062\051\063" +
    "\056\064\014\001\002\000\004\065\321\001\002\000\004" +
    "\065\320\001\002\000\004\105\uffae\001\002\000\004\105" +
    "\uffaf\001\002\000\004\002\001\001\002\000\004\004\u0109" +
    "\001\002\000\004\004\u0108\001\002\000\004\004\332\001" +
    "\002\000\004\004\327\001\002\000\004\015\330\001\002" +
    "\000\006\044\007\064\014\001\002\000\004\105\uffe8\001" +
    "\002\000\004\064\333\001\002\000\012\004\342\042\341" +
    "\067\336\124\335\001\002\000\006\065\uffe6\107\u0106\001" +
    "\002\000\004\033\375\001\002\000\004\064\372\001\002" +
    "\000\004\065\371\001\002\000\006\065\uffe4\107\uffe4\001" +
    "\002\000\004\033\365\001\002\000\012\057\271\060\267" +
    "\061\270\111\266\001\002\000\022\035\345\036\346\042" +
    "\uffd7\065\uffd7\066\uffd7\067\344\107\uffd7\110\uffd7\001\002" +
    "\000\004\064\362\001\002\000\004\036\361\001\002\000" +
    "\014\042\uffd6\065\uffd6\066\uffd6\107\uffd6\110\uffd6\001\002" +
    "\000\014\042\uffde\065\uffde\066\uffde\107\uffde\110\350\001" +
    "\002\000\016\005\055\006\054\007\062\036\053\062\051" +
    "\063\056\001\002\000\012\042\uffd4\065\uffd4\066\352\107" +
    "\uffd4\001\002\000\004\112\357\001\002\000\010\042\354" +
    "\065\uffd2\107\uffd2\001\002\000\004\033\356\001\002\000" +
    "\006\065\uffe0\107\uffe0\001\002\000\006\065\uffd1\107\uffd1" +
    "\001\002\000\010\042\uffd3\065\uffd3\107\uffd3\001\002\000" +
    "\012\042\uffdd\065\uffdd\066\uffdd\107\uffdd\001\002\000\014" +
    "\042\uffd5\065\uffd5\066\uffd5\107\uffd5\110\uffd5\001\002\000" +
    "\040\004\064\005\055\006\054\007\062\026\136\035\132" +
    "\036\053\052\044\053\046\054\063\055\050\056\045\062" +
    "\051\063\056\064\133\001\002\000\010\013\201\040\202" +
    "\065\364\001\002\000\006\065\uffdf\107\uffdf\001\002\000" +
    "\004\064\366\001\002\000\004\004\233\001\002\000\004" +
    "\065\370\001\002\000\006\065\uffe2\107\uffe2\001\002\000" +
    "\004\105\uffeb\001\002\000\040\004\064\005\055\006\054" +
    "\007\062\026\136\035\132\036\053\052\044\053\046\054" +
    "\063\055\050\056\045\062\051\063\056\064\133\001\002" +
    "\000\010\013\201\040\202\065\374\001\002\000\006\065" +
    "\uffe3\107\uffe3\001\002\000\004\064\376\001\002\000\004" +
    "\004\377\001\002\000\004\065\u0100\001\002\000\004\125" +
    "\u0101\001\002\000\004\004\u0102\001\002\000\004\064\u0103" +
    "\001\002\000\004\004\u0104\001\002\000\004\065\u0105\001" +
    "\002\000\006\065\uffe1\107\uffe1\001\002\000\012\004\342" +
    "\042\341\067\336\124\335\001\002\000\004\065\uffe5\001" +
    "\002\000\004\105\uffea\001\002\000\004\037\u010a\001\002" +
    "\000\004\004\u010b\001\002\000\004\064\u010c\001\002\000" +
    "\004\004\u010d\001\002\000\004\065\u010e\001\002\000\004" +
    "\105\uffe9\001\002\000\032\002\ufffd\010\ufffd\020\ufffd\021" +
    "\ufffd\023\ufffd\031\ufffd\044\ufffd\046\ufffd\064\ufffd\106\ufffd" +
    "\117\ufffd\120\ufffd\001\002\000\032\002\ufff6\010\ufff6\020" +
    "\ufff6\021\ufff6\023\ufff6\031\ufff6\044\ufff6\046\ufff6\064\ufff6" +
    "\106\ufff6\117\ufff6\120\ufff6\001\002\000\004\065\u0112\001" +
    "\002\000\004\104\110\001\002\000\032\002\ufff9\010\ufff9" +
    "\020\ufff9\021\ufff9\023\ufff9\031\ufff9\044\ufff9\046\ufff9\064" +
    "\ufff9\106\ufff9\117\ufff9\120\ufff9\001\002\000\032\002\ufff8" +
    "\010\ufff8\020\ufff8\021\ufff8\023\ufff8\031\ufff8\044\ufff8\046" +
    "\ufff8\064\ufff8\106\ufff8\117\ufff8\120\ufff8\001\002\000\032" +
    "\002\ufff5\010\ufff5\020\ufff5\021\ufff5\023\ufff5\031\ufff5\044" +
    "\ufff5\046\ufff5\064\ufff5\106\ufff5\117\ufff5\120\ufff5\001\002" +
    "\000\036\004\uffce\005\uffce\006\uffce\007\uffce\036\uffce\052" +
    "\uffce\053\uffce\054\uffce\055\uffce\056\uffce\062\uffce\063\uffce" +
    "\064\uffce\072\uffce\001\002\000\036\004\064\005\055\006" +
    "\054\007\062\036\053\052\044\053\046\054\063\055\050" +
    "\056\045\062\051\063\056\064\061\072\u0118\001\002\000" +
    "\020\027\uff77\041\uff77\051\uff77\065\uff77\105\uff77\114\uff77" +
    "\115\uff77\001\002\000\040\004\u013f\015\u013d\027\uffcd\041" +
    "\uffcd\051\uffcd\065\uffcd\071\074\072\077\073\075\074\076" +
    "\075\072\105\uffcd\107\uffcd\114\uffcd\115\uffcd\001\002\000" +
    "\020\027\u011b\041\uffc6\051\uffc6\065\uffc6\105\uffc6\114\uffc6" +
    "\115\uffc6\001\002\000\006\004\u0132\064\u0131\001\002\000" +
    "\016\041\uffc4\051\u011e\065\uffc4\105\uffc4\114\uffc4\115\uffc4" +
    "\001\002\000\014\041\uffc0\065\uffc0\105\uffc0\114\u0121\115" +
    "\uffc0\001\002\000\040\004\064\005\055\006\054\007\062" +
    "\026\136\035\132\036\053\052\044\053\046\054\063\055" +
    "\050\056\045\062\051\063\056\064\133\001\002\000\020" +
    "\013\201\040\202\041\uffc3\065\uffc3\105\uffc3\114\uffc3\115" +
    "\uffc3\001\002\000\012\041\uffbe\065\uffbe\105\uffbe\115\u0125" +
    "\001\002\000\004\017\u0122\001\002\000\004\004\064\001" +
    "\002\000\012\041\uffbf\065\uffbf\105\uffbf\115\uffbf\001\002" +
    "\000\010\041\u0127\065\uffbc\105\uffbc\001\002\000\040\004" +
    "\064\005\055\006\054\007\062\026\136\035\132\036\053" +
    "\052\044\053\046\054\063\055\050\056\045\062\051\063" +
    "\056\064\133\001\002\000\014\013\201\040\202\041\uffbd" +
    "\065\uffbd\105\uffbd\001\002\000\004\017\u0129\001\002\000" +
    "\006\065\uffd0\105\uffd0\001\002\000\004\004\064\001\002" +
    "\000\006\065\uffbb\105\uffbb\001\002\000\014\016\u012d\022" +
    "\u012c\065\uffb8\105\uffb8\107\uffb8\001\002\000\010\065\uffb6" +
    "\105\uffb6\107\uffb6\001\002\000\010\065\uffb7\105\uffb7\107" +
    "\uffb7\001\002\000\010\065\uffba\105\uffba\107\u012f\001\002" +
    "\000\004\004\064\001\002\000\006\065\uffb9\105\uffb9\001" +
    "\002\000\006\044\007\064\014\001\002\000\022\015\u0137" +
    "\041\uffcb\051\uffcb\065\uffcb\105\uffcb\107\uffcb\114\uffcb\115" +
    "\uffcb\001\002\000\016\041\uffc5\051\uffc5\065\uffc5\105\uffc5" +
    "\114\uffc5\115\uffc5\001\002\000\020\041\uffc8\051\uffc8\065" +
    "\uffc8\105\uffc8\107\u0135\114\uffc8\115\uffc8\001\002\000\006" +
    "\004\u0132\064\u0131\001\002\000\016\041\uffc7\051\uffc7\065" +
    "\uffc7\105\uffc7\114\uffc7\115\uffc7\001\002\000\004\004\u0138" +
    "\001\002\000\020\041\uffca\051\uffca\065\uffca\105\uffca\107" +
    "\uffca\114\uffca\115\uffca\001\002\000\004\065\u013a\001\002" +
    "\000\004\015\u013b\001\002\000\004\004\u013c\001\002\000" +
    "\020\041\uffc9\051\uffc9\065\uffc9\105\uffc9\107\uffc9\114\uffc9" +
    "\115\uffc9\001\002\000\004\004\u0144\001\002\000\022\027" +
    "\uff74\041\uff74\051\uff74\065\uff74\105\uff74\107\u0142\114\uff74" +
    "\115\uff74\001\002\000\022\027\uff76\041\uff76\051\uff76\065" +
    "\uff76\105\uff76\107\u0140\114\uff76\115\uff76\001\002\000\036" +
    "\004\064\005\055\006\054\007\062\036\053\052\044\053" +
    "\046\054\063\055\050\056\045\062\051\063\056\064\061" +
    "\072\u0118\001\002\000\020\027\uff75\041\uff75\051\uff75\065" +
    "\uff75\105\uff75\114\uff75\115\uff75\001\002\000\036\004\064" +
    "\005\055\006\054\007\062\036\053\052\044\053\046\054" +
    "\063\055\050\056\045\062\051\063\056\064\061\072\u0118" +
    "\001\002\000\020\027\uff73\041\uff73\051\uff73\065\uff73\105" +
    "\uff73\114\uff73\115\uff73\001\002\000\022\027\uffcc\041\uffcc" +
    "\051\uffcc\065\uffcc\105\uffcc\107\uffcc\114\uffcc\115\uffcc\001" +
    "\002\000\032\002\ufff7\010\ufff7\020\ufff7\021\ufff7\023\ufff7" +
    "\031\ufff7\044\ufff7\046\ufff7\064\ufff7\106\ufff7\117\ufff7\120" +
    "\ufff7\001\002\000\032\002\ufffb\010\ufffb\020\ufffb\021\ufffb" +
    "\023\ufffb\031\ufffb\044\ufffb\046\ufffb\064\ufffb\106\ufffb\117" +
    "\ufffb\120\ufffb\001\002\000\004\105\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0145\000\034\002\017\003\010\004\026\005\015\006" +
    "\021\007\004\010\030\011\012\012\011\013\005\052\007" +
    "\053\014\056\024\001\001\000\004\035\u0146\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u0116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u0110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\054\224\055\223\001" +
    "\001\000\032\003\222\004\026\005\015\006\021\007\004" +
    "\010\030\011\012\012\011\013\005\052\007\053\014\056" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\037\037\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\037\037\041\001\001\000" +
    "\002\001\001\000\012\030\051\034\056\040\057\041\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\067\030\051\034\056\040\070\041" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\105\030\051\034\056\040\070\041\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\030\051\034\056\040" +
    "\103\041\046\001\001\000\002\001\001\000\012\030\051" +
    "\034\056\040\102\041\046\001\001\000\012\030\051\034" +
    "\056\040\101\041\046\001\001\000\012\030\051\034\056" +
    "\040\100\041\046\001\001\000\012\030\051\034\056\040" +
    "\077\041\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\021\133" +
    "\030\051\034\056\040\134\041\046\001\001\000\002\001" +
    "\001\000\016\006\067\021\205\030\051\034\056\040\206" +
    "\041\046\001\001\000\002\001\001\000\004\042\141\001" +
    "\001\000\002\001\001\000\004\006\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\030\051\034\056\040" +
    "\171\041\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\021\203\030\051\034\056\040\134" +
    "\041\046\001\001\000\014\021\202\030\051\034\056\040" +
    "\134\041\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\105\021\205\030\051\034\056\040\206\041" +
    "\046\001\001\000\002\001\001\000\004\042\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\021\217\030\051\034\056\040" +
    "\134\041\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\054\242\055" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\234\001\001" +
    "\000\002\001\001\000\004\035\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\264\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\307\034\306\050\305\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\306\050\312\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\316\034\306\050\315\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\330\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\336\015\333\016\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\342" +
    "\001\001\000\004\017\346\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\350\001\001" +
    "\000\004\034\357\001\001\000\004\045\352\001\001\000" +
    "\002\001\001\000\004\020\354\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\021\362\030\051" +
    "\034\056\040\134\041\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\366\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\021\372\030\051\034\056\040\134\041\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\u0106\015\333\016\337" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\023\u0119\030\051\034\056\040\u0118\041\046" +
    "\001\001\000\002\001\001\000\004\024\u013d\001\001\000" +
    "\004\025\u011b\001\001\000\006\026\u0133\046\u0132\001\001" +
    "\000\004\027\u011c\001\001\000\004\031\u011f\001\001\000" +
    "\014\021\u011e\030\051\034\056\040\134\041\046\001\001" +
    "\000\002\001\001\000\004\032\u0123\001\001\000\002\001" +
    "\001\000\004\030\u0122\001\001\000\002\001\001\000\004" +
    "\033\u0127\001\001\000\014\021\u0125\030\051\034\056\040" +
    "\134\041\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\u012a\047\u0129\001\001\000" +
    "\002\001\001\000\004\051\u012d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\u012a\047" +
    "\u012f\001\001\000\002\001\001\000\004\006\u0138\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\u0133\046\u0135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\023\u0140\030" +
    "\051\034\056\040\u0118\041\046\001\001\000\002\001\001" +
    "\000\014\023\u0142\030\051\034\056\040\u0118\041\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  public Exp parseResult;
  Lexer lexer;
  
  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ArrayList<ErrorMsg.ErrorMsg> errorMsgList=new ArrayList<ErrorMsg.ErrorMsg>();
	ErrorMsg.ErrorMsg errorMsg=new ErrorMsg.ErrorMsg();
  public void report_error(String message, 
			   java_cup.runtime.Symbol info) {
      errorMsgList.add(new ErrorMsg.ErrorMsg(info.left, message));
  }

  public parser(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 static  Symbol sym(String s) {
	         return  Symbol.symbol(s);
	        }
	    
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // select ::= LPAREN select RPAREN UNION LPAREN select RPAREN UNION LPAREN select RPAREN 
            {
              SelectExp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // select ::= LPAREN select RPAREN UNION ALL LPAREN select RPAREN 
            {
              SelectExp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // select ::= LPAREN select RPAREN UNION LPAREN select RPAREN 
            {
              SelectExp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // select_expr ::= value as_or_not COMMA select_expr 
            {
              SelectExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AsOrNot as = (AsOrNot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectExpr s = (SelectExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(v,as,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // select_expr ::= value as_or_not 
            {
              SelectExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AsOrNot as = (AsOrNot)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(v,as,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // select_expr ::= value NAME COMMA select_expr 
            {
              SelectExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectExpr s = (SelectExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(v,new AsOrNot(new Symbol(N)),s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // select_expr ::= value NAME 
            {
              SelectExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(v,new AsOrNot(new Symbol(N)),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // select_expr ::= TIMES 
            {
              SelectExpr RESULT =null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object T = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SelectExpr(new ColValue(new ColName(null, new Symbol("*"))),null,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // bool_expr ::= value NOT LIKE STRING 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new LikeEscapeExp(v,false,false,S,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // bool_expr ::= value LIKE STRING ESCAPE STRING 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String S = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new LikeEscapeExp(v,true,true,S,S2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // bool_expr ::= value LIKE STRING 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new LikeEscapeExp(v,true,false,S,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // bool_expr ::= LPAREN bool_expr RPAREN 
            {
              BoolExp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // bool_expr ::= value cop ALL LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new AllExp(v,c,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // bool_expr ::= value cop ANY LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new AnyExp(v,c,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // bool_expr ::= value NOT IN LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new InExp(false,v,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // bool_expr ::= value IN LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new InExp(true,v,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // bool_expr ::= NOT EXISTS LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new BoolExsitExp(false,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // bool_expr ::= EXISTS LPAREN select RPAREN 
            {
              BoolExp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new BoolExsitExp(true,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // bool_expr ::= bool_expr OR bool_expr 
            {
              BoolExp RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BoolExp b1 = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp b2 = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new BoolOrExp(b1,b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // bool_expr ::= bool_expr AND bool_expr 
            {
              BoolExp RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BoolExp b1 = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp b2 = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new BoolAndExp(b1,b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // bool_expr ::= value cop value 
            {
              BoolExp RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CompBoolExp(v1,c,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // cop ::= NEQ 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("NEQ"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // cop ::= GE 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("GE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cop ::= LE 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("LE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // cop ::= EQ 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("EQ"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // cop ::= GT 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("GT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // cop ::= LT 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("LT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cop",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // value ::= func LPAREN TIMES RPAREN 
            {
              Value RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT=new FuncValue(f,new ColName(null,new Symbol("*")));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // value ::= func LPAREN col_name RPAREN 
            {
              Value RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new FuncValue(f,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // value ::= LPAREN select RPAREN 
            {
              Value RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new SubqueryValue(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // value ::= value MOD value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("MOD"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // value ::= value DIVIDE value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("DIVIDE"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // value ::= value TIMES value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("TIMES"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // value ::= value MINUS value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("MINUS"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // value ::= value PLUS value 
            {
              Value RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Value v1 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v2 = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperValue(new Symbol("PLUS"),v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // value ::= const_value 
            {
              Value RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValue v = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // value ::= col_name 
            {
              Value RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ColValue(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // value ::= LPAREN value RPAREN 
            {
              Value RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // func ::= SUM 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("SUM");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // func ::= COUNT 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("COUNT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // func ::= MAX 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("MAX");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // func ::= MIN 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("MIN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // func ::= AVG 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("AVG");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // alter ::= ALTER TABLE NAME DROP NAME 
            {
              AlterExp RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AlterDropExp(Aleft,new Symbol(N),new Symbol(N1));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // alter ::= ALTER TABLE NAME ADD NAME data_type 
            {
              AlterExp RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AlterAddExp(Aleft,new Symbol(N),new Symbol(N1),dt);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // drop ::= DROP DATABASE NAME 
            {
              DropExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DropDatabaseExp(Dleft,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // drop ::= DROP INDEX NAME ON NAME 
            {
              DropExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DropIndexExp(Dleft,new Symbol(N2),new Symbol(N1));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // drop ::= DROP VIEW NAME 
            {
              DropExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DropViewExp(Dleft,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // drop ::= DROP TABLE namelist 
            {
              DropExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NameList n = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DropTableExp(Dleft,n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // update ::= UPDATE NAME SET assignlist 
            {
              UpdateExp RESULT =null;
		int Uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object U = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignList a = (AssignList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new UpdateExp(Uleft,new Symbol(N),a,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("update",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // update ::= UPDATE NAME SET assignlist WHERE bool_expr 
            {
              UpdateExp RESULT =null;
		int Uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object U = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssignList a = (AssignList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new UpdateExp(Uleft,new Symbol(N),a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("update",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // assignlist ::= assignment COMMA assignlist 
            {
              AssignList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignList al = (AssignList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AssignList(a,al);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignlist",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // assignlist ::= assignment 
            {
              AssignList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AssignList(a,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignlist",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // assignment ::= NAME EQ value 
            {
              Assignment RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Assignment(Nleft,new Symbol(N),v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // delete ::= DELETE FROM NAME WHERE bool_expr 
            {
              DeleteExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DeleteExp(Dleft,new Symbol(N),b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delete",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // delete ::= DELETE FROM NAME 
            {
              DeleteExp RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DeleteExp(Dleft,new Symbol(N),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delete",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // namelist ::= NAME COMMA namelist 
            {
              NameList RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameList(Nleft,new Symbol(N),nl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // namelist ::= NAME 
            {
              NameList RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameList(Nleft,new Symbol(N),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // const_value_list ::= const_value COMMA const_value_list 
            {
              ConstValueList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstValue c = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValueList cl = (ConstValueList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueList(c,cl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // const_value_list ::= const_value 
            {
              ConstValueList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValue c = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueList(c,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // insert ::= INSERT INTO NAME LPAREN namelist RPAREN VALUES LPAREN const_value_list RPAREN 
            {
              InsertExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ConstValueList cl = (ConstValueList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new InsertExp(ileft,new Symbol(N),nl,cl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // insert ::= INSERT INTO NAME LPAREN namelist RPAREN VALUES LPAREN select RPAREN 
            {
              InsertExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new InsertExp(ileft,new Symbol(N),nl,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // insert ::= INSERT INTO NAME VALUES LPAREN select RPAREN 
            {
              InsertExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new InsertExp(ileft,new Symbol(N),s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // insert ::= INSERT INTO NAME VALUES LPAREN const_value_list RPAREN 
            {
              InsertExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ConstValueList cl = (ConstValueList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new InsertExp(ileft,new Symbol(N),cl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // const_value ::= NULL 
            {
              ConstValue RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueNull();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // const_value ::= FLOATVALUE 
            {
              ConstValue RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueFloat(fleft,f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // const_value ::= FALSE 
            {
              ConstValue RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueBoolean(tleft,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // const_value ::= TRUE 
            {
              ConstValue RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueBoolean(tleft,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // const_value ::= STRING 
            {
              ConstValue RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueString(sleft,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // const_value ::= INTVALUE 
            {
              ConstValue RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstValueInt(ileft,i.intValue());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_value",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asc_or_desc ::= DESC 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("DESC");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asc_or_desc",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // asc_or_desc ::= ASC 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("ASC");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asc_or_desc",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // asc_or_desc ::= 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("ASC");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asc_or_desc",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // order_list ::= col_name asc_or_desc COMMA order_list 
            {
              OrderList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ColName n = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OrderList o = (OrderList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OrderList(n,a,o);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // order_list ::= col_name asc_or_desc 
            {
              OrderList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ColName n = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OrderList(n,a,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // order_clause ::= ORDER BY order_list 
            {
              OrderClause RESULT =null;
		int olleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int olright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OrderList ol = (OrderList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrderClause(ol); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_clause",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // order_clause ::= 
            {
              OrderClause RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_clause",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // having_clause ::= HAVING bool_expr 
            {
              HavingClause RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp be = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new HavingClause(be); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("having_clause",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // having_clause ::= 
            {
              HavingClause RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("having_clause",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // group_clause ::= GROUP BY col_name 
            {
              GroupClause RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColName c = (ColName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new GroupClause(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_clause",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // group_clause ::= 
            {
              GroupClause RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_clause",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // col_name ::= NAME DOT NAME 
            {
              ColName RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ColName(new Symbol(N1),new Symbol(N2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col_name",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // col_name ::= NAME 
            {
              ColName RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ColName(null,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col_name",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // where_clause ::= WHERE bool_expr 
            {
              WhereClause RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new WhereClause(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("where_clause",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // where_clause ::= 
            {
              WhereClause RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("where_clause",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // from_clause ::= FROM table_ref_list 
            {
              FromClause RESULT =null;
		int trlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableRefList trl = (TableRefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new FromClause(trl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("from_clause",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // from_clause ::= 
            {
              FromClause RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("from_clause",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // table_ref_list ::= table_ref COMMA table_ref_list 
            {
              TableRefList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TableRef t = (TableRef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int trlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableRefList trl = (TableRefList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRefList(t,trl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // table_ref_list ::= table_ref 
            {
              TableRefList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableRef t = (TableRef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRefList(t,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // table_ref ::= LPAREN select RPAREN AS NAME 
            {
              TableRef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRef(null,new Symbol(N),s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // table_ref ::= NAME AS NAME 
            {
              TableRef RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRef(new Symbol(N1),new Symbol(N2),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // table_ref ::= NAME 
            {
              TableRef RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TableRef(new Symbol(N),null,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // as_or_not ::= AS NAME 
            {
              AsOrNot RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsOrNot(new Symbol(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("as_or_not",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // as_or_not ::= 
            {
              AsOrNot RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("as_or_not",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // distinct_or_not ::= DISTINCT 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("DISTINCT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("distinct_or_not",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // distinct_or_not ::= 
            {
              Symbol RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("distinct_or_not",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // select ::= SELECT distinct_or_not select_expr from_clause where_clause group_clause having_clause order_clause 
            {
              SelectExp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		SelectExpr s = (SelectExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		FromClause f = (FromClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WhereClause w = (WhereClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GroupClause g = (GroupClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HavingClause h = (HavingClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OrderClause o = (OrderClause)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SelectExp(d, s, f, w, g, h, o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // primary_key ::= PRIMARY KEY 
            {
              Symbol RESULT =null;
		RESULT=new Symbol("PRIMARYKEY");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_key",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // primary_key ::= 
            {
              Symbol RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_key",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // auto_increasement ::= AUTO INCREMENT 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("AUTOINCREMENT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auto_increasement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // auto_increasement ::= 
            {
              Symbol RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auto_increasement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // null_or_not ::= NOT NULL 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("NOTNULL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("null_or_not",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // null_or_not ::= NULL 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol("NULL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("null_or_not",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // null_or_not ::= 
            {
              Symbol RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("null_or_not",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // data_type ::= BOOLEAN 
            {
              DataType RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameTy( new Symbol("boolean"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // data_type ::= CHAR 
            {
              DataType RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ArrayTy( new Symbol("char"),1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // data_type ::= CHAR LPAREN INTVALUE RPAREN 
            {
              DataType RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object L = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer I = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ArrayTy( new Symbol("char"),(Integer)I);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // data_type ::= FLOAT 
            {
              DataType RESULT =null;
		int Fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameTy( new Symbol("float"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // data_type ::= INT 
            {
              DataType RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new NameTy( new Symbol("int"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // default_value ::= DEFAULT const_value 
            {
              ConstValue RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstValue cv = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_value",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // default_value ::= 
            {
              ConstValue RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_value",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // column_definition ::= NAME data_type CHECK LPAREN bool_expr RPAREN 
            {
              ColumnDefinition RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dtyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dtyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DataType dty = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ColumnDefinition(ileft, new Symbol(i), dty, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_definition",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // column_definition ::= NAME data_type null_or_not default_value auto_increasement primary_key 
            {
              ColumnDefinition RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Symbol non = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstValue dv = (ConstValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol ai = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pkright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol pk = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ColumnDefinition(Nleft,new Symbol(N),dt,pk,non,ai,dv); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_definition",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // create_element ::= FOREIGN KEY LPAREN NAME RPAREN REFERENCES NAME LPAREN NAME RPAREN 
            {
              CreateElement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String N2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new ForeignKeyDef(fleft,new Symbol(N),new ColName(new Symbol(N1),new Symbol(N2)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_element",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // create_element ::= PRIMARY KEY LPAREN namelist RPAREN 
            {
              CreateElement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NameList n = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new PrimaryKeyDef(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_element",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // create_element ::= CHECK LPAREN bool_expr RPAREN 
            {
              CreateElement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExp b = (BoolExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new CheckDef(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_element",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // create_element ::= column_definition 
            {
              CreateElement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColumnDefinition c = (ColumnDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_element",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // create_element_list ::= create_element COMMA create_element_list 
            {
              CreateElementList RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CreateElement c1 = (CreateElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CreateElementList c = (CreateElementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateElementList( c1,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_element_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // create_element_list ::= create_element 
            {
              CreateElementList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CreateElement c = (CreateElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateElementList( c,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_element_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // use ::= USE NAME 
            {
              UseDatabaseExp RESULT =null;
		int Uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object U = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new UseDatabaseExp(Uleft,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // create ::= CREATE VIEW NAME AS select 
            {
              CreateExp RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateViewExp(Cleft,new Symbol(N),s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // create ::= CREATE INDEX NAME ON NAME LPAREN NAME RPAREN 
            {
              CreateExp RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String N1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object O = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String N2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object L = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int N3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String N3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateIndexExp(Cleft,new Symbol(N1),new Symbol(N2),new Symbol(N3),false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // create ::= CREATE DATABASE NAME 
            {
              CreateExp RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateDatabaseExp(Cleft,new Symbol(N));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // create ::= CREATE TABLE NAME LPAREN create_element_list RPAREN 
            {
              CreateExp RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object T = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String N = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int LPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int LPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object LP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CreateElementList c = (CreateElementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int RPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int RPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object RP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new CreateTableExp(Cleft,new Symbol(N),c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // privilege ::= UPDATE 
            {
              Privilege RESULT =null;
		 RESULT = new Privilege(new Symbol("UPDATE")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("privilege",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // privilege ::= INSERT 
            {
              Privilege RESULT =null;
		 RESULT = new Privilege(new Symbol("INSERT")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("privilege",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // privilege ::= SELECT 
            {
              Privilege RESULT =null;
		 RESULT = new Privilege(new Symbol("SELECT")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("privilege",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // privileges ::= privilege privileges 
            {
              Privileges RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Privilege p = (Privilege)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Privileges ps = (Privileges)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Privileges(p,ps);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("privileges",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // privileges ::= privilege 
            {
              Privileges RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Privilege p = (Privilege)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Privileges(p,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("privileges",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // grant ::= GRANT privileges ON namelist TO namelist WITH GRANT OPTION 
            {
              GrantExp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Privileges p = (Privileges)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameList n1 = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NameList n2 = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT=new GrantExp(p,n1,n2,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("grant",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // grant ::= GRANT privileges ON namelist TO namelist 
            {
              GrantExp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Privileges p = (Privileges)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NameList n1 = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NameList n2 = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new GrantExp(p,n1,n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("grant",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // describe ::= DESCRIBE namelist 
            {
              DescribeExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NameList n = (NameList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DescribeExp(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("describe",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sql ::= use SEMICOLON 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UseDatabaseExp u = (UseDatabaseExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=u;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sql ::= grant SEMICOLON 
            {
              Exp RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GrantExp g = (GrantExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=g;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sql ::= describe SEMICOLON 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DescribeExp d = (DescribeExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=d;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sql ::= alter SEMICOLON 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AlterExp a = (AlterExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sql ::= drop SEMICOLON 
            {
              Exp RESULT =null;
		int drleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DropExp dr = (DropExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=dr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sql ::= update SEMICOLON 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UpdateExp u = (UpdateExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=u;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sql ::= delete SEMICOLON 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeleteExp d = (DeleteExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=d;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sql ::= insert SEMICOLON 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InsertExp i = (InsertExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sql ::= select SEMICOLON 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectExp s = (SelectExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sql ::= create SEMICOLON 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CreateExp c = (CreateExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sql_list ::= sql sql_list 
            {
              SQLList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SQLList l = (SQLList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SQLList(s,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sql_list ::= sql 
            {
              SQLList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new SQLList(s,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sql_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // database ::= sql_list 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SQLList s = (SQLList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("database",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= database EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

